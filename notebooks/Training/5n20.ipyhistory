{
 "checkpoints": [
  {
   "timestamp": 1626922576319,
   "notebook": 0,
   "targetCells": [
    {
     "cell": "c.0.0",
     "changeType": "added",
     "index": 2
    },
    {
     "cell": "c.1.0",
     "changeType": "added",
     "index": 0
    },
    {
     "cell": "c.2.0",
     "changeType": "added",
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1626922650475,
   "notebook": 1,
   "targetCells": [
    {
     "cell": "c.1.1",
     "changeType": "edited",
     "output": [],
     "index": 0
    },
    {
     "cell": "c.3.0",
     "changeType": "added",
     "index": 3
    },
    {
     "cell": "c.0.1",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1626922896955,
   "notebook": 2,
   "targetCells": [
    {
     "cell": "c.1.2",
     "changeType": "edited",
     "output": [],
     "index": 0
    },
    {
     "cell": "c.2.1",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1626922902383,
   "notebook": 3,
   "targetCells": [
    {
     "cell": "c.1.2",
     "changeType": "output changed",
     "output": [
      "o.0.0"
     ],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1626922918432,
   "notebook": 4,
   "targetCells": [
    {
     "cell": "c.1.2",
     "changeType": "output changed",
     "output": [
      "o.0.1"
     ],
     "index": 0
    },
    {
     "cell": "c.0.1",
     "changeType": "output changed",
     "output": [
      "o.1.0"
     ],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1626924275331,
   "notebook": 5,
   "targetCells": [
    {
     "cell": "c.1.2",
     "changeType": "output changed",
     "output": [
      "o.0.2"
     ],
     "index": 0
    },
    {
     "cell": "c.4.0",
     "changeType": "added",
     "index": 4
    },
    {
     "cell": "c.3.1",
     "changeType": "edited",
     "output": [],
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1626933765702,
   "notebook": 6,
   "targetCells": [
    {
     "cell": "c.1.2",
     "changeType": "output changed",
     "output": [
      "o.0.3"
     ],
     "index": 0
    },
    {
     "cell": "c.3.2",
     "changeType": "edited",
     "output": [],
     "index": 3
    },
    {
     "cell": "c.5.0",
     "changeType": "added",
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1626933924555,
   "notebook": 7,
   "targetCells": [
    {
     "cell": "c.5.1",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1626933946461,
   "notebook": 8,
   "targetCells": [
    {
     "cell": "c.5.2",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.0.2",
     "changeType": "edited",
     "output": [],
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1626933959221,
   "notebook": 9,
   "targetCells": [
    {
     "cell": "c.0.2",
     "changeType": "output changed",
     "output": [
      "o.2.0"
     ],
     "index": 3
    },
    {
     "cell": "c.3.3",
     "changeType": "edited",
     "output": [
      "o.3.0"
     ],
     "index": 4
    },
    {
     "cell": "c.5.3",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.1.2",
     "changeType": "output changed",
     "output": [
      "o.0.4"
     ],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1626934153228,
   "notebook": 10,
   "targetCells": [
    {
     "cell": "c.3.3",
     "changeType": "output changed",
     "output": [
      "o.3.1"
     ],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1626934186590,
   "notebook": 11,
   "targetCells": [
    {
     "cell": "c.3.4",
     "changeType": "edited",
     "output": [],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1626934219133,
   "notebook": 12,
   "targetCells": [
    {
     "cell": "c.3.5",
     "changeType": "edited",
     "output": [
      "o.4.0"
     ],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1626934228571,
   "notebook": 13,
   "targetCells": [
    {
     "cell": "c.3.6",
     "changeType": "edited",
     "output": [
      "o.5.0"
     ],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1627060126624,
   "notebook": 14,
   "targetCells": [
    {
     "cell": "c.0.3",
     "changeType": "edited",
     "output": []
    }
   ]
  },
  {
   "timestamp": 1627286442451,
   "notebook": 15,
   "targetCells": [
    {
     "cell": "c.6.0",
     "changeType": "added",
     "index": 3
    },
    {
     "cell": "c.2.2",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627286682355,
   "notebook": 16,
   "targetCells": [
    {
     "cell": "c.2.3",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627286802425,
   "notebook": 17,
   "targetCells": [
    {
     "cell": "c.1.3",
     "changeType": "edited",
     "output": [],
     "index": 0
    },
    {
     "cell": "c.2.4",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627286922484,
   "notebook": 18,
   "targetCells": [
    {
     "cell": "c.2.5",
     "changeType": "edited",
     "output": [],
     "index": 1
    },
    {
     "cell": "c.1.4",
     "changeType": "edited",
     "output": [
      "o.7.0"
     ],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1627287026858,
   "notebook": 19,
   "targetCells": [
    {
     "cell": "c.2.6",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627287083641,
   "notebook": 20,
   "targetCells": [
    {
     "cell": "c.2.7",
     "changeType": "edited",
     "output": [
      "o.8.0"
     ],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627287111469,
   "notebook": 21,
   "targetCells": [
    {
     "cell": "c.2.8",
     "changeType": "edited",
     "output": [
      "o.9.0"
     ],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627287148531,
   "notebook": 22,
   "targetCells": [
    {
     "cell": "c.2.9",
     "changeType": "edited",
     "output": [
      "o.10.0"
     ],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627287160571,
   "notebook": 23,
   "targetCells": [
    {
     "cell": "c.2.10",
     "changeType": "edited",
     "output": [
      "o.11.0"
     ],
     "index": 1
    },
    {
     "cell": "c.5.4",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.6.1",
     "changeType": "edited",
     "output": [],
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1627287288862,
   "notebook": 24,
   "targetCells": [
    {
     "cell": "c.5.5",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.6.1",
     "changeType": "output changed",
     "output": [
      "o.12.0"
     ],
     "index": 3
    },
    {
     "cell": "c.3.6",
     "changeType": "output changed",
     "output": [
      "o.5.1"
     ],
     "index": 4
    },
    {
     "cell": "c.2.11",
     "changeType": "edited",
     "output": [],
     "index": 1
    },
    {
     "cell": "c.1.5",
     "changeType": "edited",
     "output": [],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1627287451043,
   "notebook": 25,
   "targetCells": [
    {
     "cell": "c.2.11",
     "changeType": "output changed",
     "output": [
      "o.13.0"
     ],
     "index": 1
    },
    {
     "cell": "c.3.6",
     "changeType": "output changed",
     "output": [
      "o.5.2"
     ],
     "index": 4
    },
    {
     "cell": "c.7.0",
     "changeType": "added",
     "index": 6
    },
    {
     "cell": "c.4.1",
     "changeType": "edited",
     "output": [
      "o.14.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627287642964,
   "notebook": 26,
   "targetCells": [
    {
     "cell": "c.4.2",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627287668739,
   "notebook": 27,
   "targetCells": [
    {
     "cell": "c.4.3",
     "changeType": "edited",
     "output": [
      "o.15.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627287704741,
   "notebook": 28,
   "targetCells": [
    {
     "cell": "c.4.4",
     "changeType": "edited",
     "output": [
      "o.16.0"
     ],
     "index": 5
    },
    {
     "cell": "c.5.6",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627287764737,
   "notebook": 29,
   "targetCells": [
    {
     "cell": "c.5.7",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.3.6",
     "changeType": "output changed",
     "output": [
      "o.5.3"
     ],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1627287819910,
   "notebook": 30,
   "targetCells": [
    {
     "cell": "c.3.7",
     "changeType": "edited",
     "output": [],
     "index": 4
    },
    {
     "cell": "c.4.5",
     "changeType": "edited",
     "output": [
      "o.17.0"
     ],
     "index": 5
    },
    {
     "cell": "c.5.8",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627287915060,
   "notebook": 31,
   "targetCells": [
    {
     "cell": "c.3.7",
     "changeType": "output changed",
     "output": [
      "o.18.0"
     ],
     "index": 4
    },
    {
     "cell": "c.4.5",
     "changeType": "output changed",
     "output": [
      "o.17.1"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627287949807,
   "notebook": 32,
   "targetCells": [
    {
     "cell": "c.4.6",
     "changeType": "edited",
     "output": [
      "o.19.0"
     ],
     "index": 5
    },
    {
     "cell": "c.5.9",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627288003220,
   "notebook": 33,
   "targetCells": [
    {
     "cell": "c.4.7",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627288123291,
   "notebook": 34,
   "targetCells": [
    {
     "cell": "c.2.12",
     "changeType": "edited",
     "output": [],
     "index": 1
    },
    {
     "cell": "c.5.10",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.4.8",
     "changeType": "edited",
     "output": [],
     "index": 5
    },
    {
     "cell": "c.3.7",
     "changeType": "output changed",
     "output": [
      "o.18.1"
     ],
     "index": 4
    }
   ]
  },
  {
   "timestamp": 1627288168472,
   "notebook": 35,
   "targetCells": [
    {
     "cell": "c.4.8",
     "changeType": "output changed",
     "output": [
      "o.20.0"
     ],
     "index": 5
    },
    {
     "cell": "c.2.13",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627288628925,
   "notebook": 36,
   "targetCells": [
    {
     "cell": "c.2.13",
     "changeType": "output changed",
     "output": [
      "o.21.0"
     ],
     "index": 1
    },
    {
     "cell": "c.5.11",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627288843919,
   "notebook": 37,
   "targetCells": [
    {
     "cell": "c.5.12",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627289032240,
   "notebook": 38,
   "targetCells": [
    {
     "cell": "c.5.13",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.4.8",
     "changeType": "output changed",
     "output": [
      "o.20.1"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627289209049,
   "notebook": 39,
   "targetCells": [
    {
     "cell": "c.5.14",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.4.9",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627290587956,
   "notebook": 40,
   "targetCells": [
    {
     "cell": "c.5.15",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627290708020,
   "notebook": 41,
   "targetCells": [
    {
     "cell": "c.5.16",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.1.6",
     "changeType": "edited",
     "output": [
      "o.22.0"
     ],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1627290828086,
   "notebook": 42,
   "targetCells": [
    {
     "cell": "c.5.17",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627290948160,
   "notebook": 43,
   "targetCells": [
    {
     "cell": "c.5.18",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627291068916,
   "notebook": 44,
   "targetCells": [
    {
     "cell": "c.2.14",
     "changeType": "edited",
     "output": [],
     "index": 1
    },
    {
     "cell": "c.5.19",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.6.2",
     "changeType": "edited",
     "output": [],
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1627291188967,
   "notebook": 45,
   "targetCells": [
    {
     "cell": "c.5.20",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.1.6",
     "changeType": "output changed",
     "output": [
      "o.22.1"
     ],
     "index": 0
    },
    {
     "cell": "c.2.14",
     "changeType": "output changed",
     "output": [
      "o.23.0"
     ],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627291305112,
   "notebook": 46,
   "targetCells": [
    {
     "cell": "c.5.21",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627291359016,
   "notebook": 47,
   "targetCells": [
    {
     "cell": "c.5.22",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627291390122,
   "notebook": 48,
   "targetCells": [
    {
     "cell": "c.5.23",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627291413240,
   "notebook": 49,
   "targetCells": [
    {
     "cell": "c.5.24",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627291522537,
   "notebook": 50,
   "targetCells": [
    {
     "cell": "c.5.25",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.6.2",
     "changeType": "output changed",
     "output": [
      "o.24.0"
     ],
     "index": 3
    },
    {
     "cell": "c.3.7",
     "changeType": "output changed",
     "output": [
      "o.18.2"
     ],
     "index": 4
    },
    {
     "cell": "c.4.9",
     "changeType": "output changed",
     "output": [
      "o.25.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627292029348,
   "notebook": 51,
   "targetCells": [
    {
     "cell": "c.1.7",
     "changeType": "edited",
     "output": [],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1627292059837,
   "notebook": 52,
   "targetCells": [
    {
     "cell": "c.1.8",
     "changeType": "edited",
     "output": [
      "o.26.0"
     ],
     "index": 0
    }
   ]
  },
  {
   "timestamp": 1627292068433,
   "notebook": 53,
   "targetCells": [
    {
     "cell": "c.1.8",
     "changeType": "output changed",
     "output": [
      "o.26.1"
     ],
     "index": 0
    },
    {
     "cell": "c.2.14",
     "changeType": "output changed",
     "output": [
      "o.23.1"
     ],
     "index": 1
    },
    {
     "cell": "c.6.2",
     "changeType": "output changed",
     "output": [
      "o.24.1"
     ],
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1627292138199,
   "notebook": 54,
   "targetCells": [
    {
     "cell": "c.6.2",
     "changeType": "removed",
     "index": 3
    }
   ]
  },
  {
   "timestamp": 1627292141436,
   "notebook": 55,
   "targetCells": [
    {
     "cell": "c.3.7",
     "changeType": "output changed",
     "output": [
      "o.18.3"
     ],
     "index": 3
    },
    {
     "cell": "c.4.9",
     "changeType": "output changed",
     "output": [
      "o.25.1"
     ],
     "index": 4
    },
    {
     "cell": "c.5.26",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.7.1",
     "changeType": "edited",
     "output": [],
     "index": 5
    },
    {
     "cell": "c.8.0",
     "changeType": "added",
     "index": 6
    }
   ]
  },
  {
   "timestamp": 1627292408655,
   "notebook": 56,
   "targetCells": [
    {
     "cell": "c.7.2",
     "changeType": "edited",
     "output": [
      "o.27.0"
     ],
     "index": 5
    },
    {
     "cell": "c.8.1",
     "changeType": "edited",
     "output": [],
     "index": 6
    },
    {
     "cell": "c.9.0",
     "changeType": "added",
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627292538458,
   "notebook": 57,
   "targetCells": [
    {
     "cell": "c.8.2",
     "changeType": "edited",
     "output": [
      "o.28.0"
     ],
     "index": 6
    }
   ]
  },
  {
   "timestamp": 1627292563732,
   "notebook": 58,
   "targetCells": [
    {
     "cell": "c.8.3",
     "changeType": "edited",
     "output": [
      "o.29.0"
     ],
     "index": 6
    },
    {
     "cell": "c.9.1",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627292749916,
   "notebook": 59,
   "targetCells": [
    {
     "cell": "c.9.2",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627292870919,
   "notebook": 60,
   "targetCells": [
    {
     "cell": "c.5.27",
     "changeType": "edited",
     "output": [],
     "index": 2
    },
    {
     "cell": "c.3.8",
     "changeType": "edited",
     "output": [],
     "index": 3
    },
    {
     "cell": "c.4.10",
     "changeType": "edited",
     "output": [],
     "index": 4
    },
    {
     "cell": "c.9.3",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627292991012,
   "notebook": 61,
   "targetCells": [
    {
     "cell": "c.9.4",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627293111096,
   "notebook": 62,
   "targetCells": [
    {
     "cell": "c.9.5",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627293351918,
   "notebook": 63,
   "targetCells": [
    {
     "cell": "c.9.6",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627293593920,
   "notebook": 64,
   "targetCells": [
    {
     "cell": "c.9.7",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627293714926,
   "notebook": 65,
   "targetCells": [
    {
     "cell": "c.9.8",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627293956926,
   "notebook": 66,
   "targetCells": [
    {
     "cell": "c.9.9",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627298147955,
   "notebook": 67,
   "targetCells": [
    {
     "cell": "c.9.10",
     "changeType": "edited",
     "output": [],
     "index": 7
    }
   ]
  },
  {
   "timestamp": 1627372403379,
   "notebook": 68,
   "targetCells": [
    {
     "cell": "c.8.3",
     "changeType": "removed",
     "index": 6
    },
    {
     "cell": "c.7.2",
     "changeType": "removed",
     "index": 5
    },
    {
     "cell": "c.5.28",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627372609849,
   "notebook": 69,
   "targetCells": [
    {
     "cell": "c.5.29",
     "changeType": "edited",
     "output": [
      "o.30.0"
     ],
     "index": 2
    },
    {
     "cell": "c.3.8",
     "changeType": "output changed",
     "output": [
      "o.31.0"
     ],
     "index": 3
    },
    {
     "cell": "c.4.10",
     "changeType": "output changed",
     "output": [
      "o.32.0"
     ],
     "index": 4
    },
    {
     "cell": "c.10.0",
     "changeType": "added",
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627372714315,
   "notebook": 70,
   "targetCells": [
    {
     "cell": "c.10.1",
     "changeType": "edited",
     "output": [
      "o.33.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627372723034,
   "notebook": 71,
   "targetCells": [
    {
     "cell": "c.10.2",
     "changeType": "edited",
     "output": [
      "o.34.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627372773500,
   "notebook": 72,
   "targetCells": [
    {
     "cell": "c.10.3",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627372893566,
   "notebook": 73,
   "targetCells": [
    {
     "cell": "c.10.4",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373253636,
   "notebook": 74,
   "targetCells": [
    {
     "cell": "c.10.5",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373373713,
   "notebook": 75,
   "targetCells": [
    {
     "cell": "c.10.6",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373493782,
   "notebook": 76,
   "targetCells": [
    {
     "cell": "c.10.7",
     "changeType": "edited",
     "output": [],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373578373,
   "notebook": 77,
   "targetCells": [
    {
     "cell": "c.10.8",
     "changeType": "edited",
     "output": [
      "o.35.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373748038,
   "notebook": 78,
   "targetCells": [
    {
     "cell": "c.10.9",
     "changeType": "edited",
     "output": [
      "o.36.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373769966,
   "notebook": 79,
   "targetCells": [
    {
     "cell": "c.10.10",
     "changeType": "edited",
     "output": [
      "o.37.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373781332,
   "notebook": 80,
   "targetCells": [
    {
     "cell": "c.10.11",
     "changeType": "edited",
     "output": [
      "o.38.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373821079,
   "notebook": 81,
   "targetCells": [
    {
     "cell": "c.10.12",
     "changeType": "edited",
     "output": [
      "o.39.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627373837790,
   "notebook": 82,
   "targetCells": [
    {
     "cell": "c.10.13",
     "changeType": "edited",
     "output": [
      "o.40.0"
     ],
     "index": 5
    },
    {
     "cell": "c.5.30",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627374334117,
   "notebook": 83,
   "targetCells": [
    {
     "cell": "c.5.31",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627374454189,
   "notebook": 84,
   "targetCells": [
    {
     "cell": "c.5.32",
     "changeType": "edited",
     "output": [],
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627374475357,
   "notebook": 85,
   "targetCells": [
    {
     "cell": "c.5.32",
     "changeType": "output changed",
     "output": [
      "o.41.0"
     ],
     "index": 2
    },
    {
     "cell": "c.3.8",
     "changeType": "output changed",
     "output": [
      "o.31.1"
     ],
     "index": 3
    },
    {
     "cell": "c.4.10",
     "changeType": "output changed",
     "output": [
      "o.32.1"
     ],
     "index": 4
    },
    {
     "cell": "c.10.14",
     "changeType": "edited",
     "output": [
      "o.42.0"
     ],
     "index": 5
    }
   ]
  },
  {
   "timestamp": 1627374574257,
   "notebook": 86,
   "targetCells": [
    {
     "cell": "c.2.15",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627374694337,
   "notebook": 87,
   "targetCells": [
    {
     "cell": "c.2.16",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627374814391,
   "notebook": 88,
   "targetCells": [
    {
     "cell": "c.2.17",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627374934475,
   "notebook": 89,
   "targetCells": [
    {
     "cell": "c.2.18",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627375054541,
   "notebook": 90,
   "targetCells": [
    {
     "cell": "c.2.19",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627375174905,
   "notebook": 91,
   "targetCells": [
    {
     "cell": "c.2.20",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627388629222,
   "notebook": 92,
   "targetCells": [
    {
     "cell": "c.2.21",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627388749305,
   "notebook": 93,
   "targetCells": [
    {
     "cell": "c.2.22",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627388869372,
   "notebook": 94,
   "targetCells": [
    {
     "cell": "c.2.23",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627388989454,
   "notebook": 95,
   "targetCells": [
    {
     "cell": "c.2.24",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627389109529,
   "notebook": 96,
   "targetCells": [
    {
     "cell": "c.2.25",
     "changeType": "edited",
     "output": [],
     "index": 1
    }
   ]
  },
  {
   "timestamp": 1627389350184,
   "notebook": 97,
   "targetCells": [
    {
     "cell": "c.2.26",
     "changeType": "edited",
     "output": []
    }
   ]
  },
  {
   "timestamp": 1627550689090,
   "notebook": 98,
   "targetCells": [
    {
     "cell": "c.11.0",
     "changeType": "added",
     "index": 2
    }
   ]
  },
  {
   "timestamp": 1627643584778,
   "notebook": 99,
   "targetCells": [
    {
     "cell": "c.12.0",
     "changeType": "added",
     "index": 7
    }
   ]
  }
 ],
 "notebook": {
  "artifact_name": "n.0",
  "versions": [
   {
    "start_checkpoint": 1626922576319,
    "cells": [
     "c.1.0",
     "c.2.0",
     "c.0.0"
    ]
   },
   {
    "start_checkpoint": 1626922650475,
    "cells": [
     "c.1.1",
     "c.2.0",
     "c.0.1",
     "c.3.0"
    ]
   },
   {
    "start_checkpoint": 1626922896955,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.0.1",
     "c.3.0"
    ]
   },
   {
    "start_checkpoint": 1626922902383,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.0.1",
     "c.3.0"
    ]
   },
   {
    "start_checkpoint": 1626922918432,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.0.1",
     "c.3.0"
    ]
   },
   {
    "start_checkpoint": 1626924275331,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.0.1",
     "c.3.1",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626933765702,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.0",
     "c.0.1",
     "c.3.2",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626933924555,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.1",
     "c.0.1",
     "c.3.2",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626933946461,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.2",
     "c.0.2",
     "c.3.2",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626933959221,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.2",
     "c.3.3",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626934153228,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.2",
     "c.3.3",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626934186590,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.2",
     "c.3.4",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626934219133,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.2",
     "c.3.5",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1626934228571,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.2",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627060126624,
    "cells": [
     "c.1.2",
     "c.2.1",
     "c.5.3",
     "c.0.3",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627286442451,
    "cells": [
     "c.1.2",
     "c.2.2",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627286682355,
    "cells": [
     "c.1.2",
     "c.2.3",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627286802425,
    "cells": [
     "c.1.3",
     "c.2.4",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627286922484,
    "cells": [
     "c.1.4",
     "c.2.5",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287026858,
    "cells": [
     "c.1.4",
     "c.2.6",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287083641,
    "cells": [
     "c.1.4",
     "c.2.7",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287111469,
    "cells": [
     "c.1.4",
     "c.2.8",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287148531,
    "cells": [
     "c.1.4",
     "c.2.9",
     "c.5.3",
     "c.6.0",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287160571,
    "cells": [
     "c.1.4",
     "c.2.10",
     "c.5.4",
     "c.6.1",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287288862,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.5",
     "c.6.1",
     "c.3.6",
     "c.4.0"
    ]
   },
   {
    "start_checkpoint": 1627287451043,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.5",
     "c.6.1",
     "c.3.6",
     "c.4.1",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287642964,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.5",
     "c.6.1",
     "c.3.6",
     "c.4.2",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287668739,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.5",
     "c.6.1",
     "c.3.6",
     "c.4.3",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287704741,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.6",
     "c.6.1",
     "c.3.6",
     "c.4.4",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287764737,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.7",
     "c.6.1",
     "c.3.6",
     "c.4.4",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287819910,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.8",
     "c.6.1",
     "c.3.7",
     "c.4.5",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287915060,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.8",
     "c.6.1",
     "c.3.7",
     "c.4.5",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627287949807,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.9",
     "c.6.1",
     "c.3.7",
     "c.4.6",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627288003220,
    "cells": [
     "c.1.5",
     "c.2.11",
     "c.5.9",
     "c.6.1",
     "c.3.7",
     "c.4.7",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627288123291,
    "cells": [
     "c.1.5",
     "c.2.12",
     "c.5.10",
     "c.6.1",
     "c.3.7",
     "c.4.8",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627288168472,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.10",
     "c.6.1",
     "c.3.7",
     "c.4.8",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627288628925,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.11",
     "c.6.1",
     "c.3.7",
     "c.4.8",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627288843919,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.12",
     "c.6.1",
     "c.3.7",
     "c.4.8",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627289032240,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.13",
     "c.6.1",
     "c.3.7",
     "c.4.8",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627289209049,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.14",
     "c.6.1",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627290587956,
    "cells": [
     "c.1.5",
     "c.2.13",
     "c.5.15",
     "c.6.1",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627290708020,
    "cells": [
     "c.1.6",
     "c.2.13",
     "c.5.16",
     "c.6.1",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627290828086,
    "cells": [
     "c.1.6",
     "c.2.13",
     "c.5.17",
     "c.6.1",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627290948160,
    "cells": [
     "c.1.6",
     "c.2.13",
     "c.5.18",
     "c.6.1",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291068916,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.19",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291188967,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.20",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291305112,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.21",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291359016,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.22",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291390122,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.23",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291413240,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.24",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627291522537,
    "cells": [
     "c.1.6",
     "c.2.14",
     "c.5.25",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627292029348,
    "cells": [
     "c.1.7",
     "c.2.14",
     "c.5.25",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627292059837,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.25",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627292068433,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.25",
     "c.6.2",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627292138199,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.25",
     "c.3.7",
     "c.4.9",
     "c.7.0"
    ]
   },
   {
    "start_checkpoint": 1627292141436,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.26",
     "c.3.7",
     "c.4.9",
     "c.7.1",
     "c.8.0"
    ]
   },
   {
    "start_checkpoint": 1627292408655,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.26",
     "c.3.7",
     "c.4.9",
     "c.7.2",
     "c.8.1",
     "c.9.0"
    ]
   },
   {
    "start_checkpoint": 1627292538458,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.26",
     "c.3.7",
     "c.4.9",
     "c.7.2",
     "c.8.2",
     "c.9.0"
    ]
   },
   {
    "start_checkpoint": 1627292563732,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.26",
     "c.3.7",
     "c.4.9",
     "c.7.2",
     "c.8.3",
     "c.9.1"
    ]
   },
   {
    "start_checkpoint": 1627292749916,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.26",
     "c.3.7",
     "c.4.9",
     "c.7.2",
     "c.8.3",
     "c.9.2"
    ]
   },
   {
    "start_checkpoint": 1627292870919,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.3"
    ]
   },
   {
    "start_checkpoint": 1627292991012,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.4"
    ]
   },
   {
    "start_checkpoint": 1627293111096,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.5"
    ]
   },
   {
    "start_checkpoint": 1627293351918,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.6"
    ]
   },
   {
    "start_checkpoint": 1627293593920,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.7"
    ]
   },
   {
    "start_checkpoint": 1627293714926,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.8"
    ]
   },
   {
    "start_checkpoint": 1627293956926,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.9"
    ]
   },
   {
    "start_checkpoint": 1627298147955,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.27",
     "c.3.8",
     "c.4.10",
     "c.7.2",
     "c.8.3",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372403379,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.28",
     "c.3.8",
     "c.4.10",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372609849,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.0",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372714315,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.1",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372723034,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.2",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372773500,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.3",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627372893566,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.4",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373253636,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.5",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373373713,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.6",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373493782,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.7",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373578373,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.8",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373748038,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.9",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373769966,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.10",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373781332,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.11",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373821079,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.29",
     "c.3.8",
     "c.4.10",
     "c.10.12",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627373837790,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.30",
     "c.3.8",
     "c.4.10",
     "c.10.13",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374334117,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.31",
     "c.3.8",
     "c.4.10",
     "c.10.13",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374454189,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.13",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374475357,
    "cells": [
     "c.1.8",
     "c.2.14",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374574257,
    "cells": [
     "c.1.8",
     "c.2.15",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374694337,
    "cells": [
     "c.1.8",
     "c.2.16",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374814391,
    "cells": [
     "c.1.8",
     "c.2.17",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627374934475,
    "cells": [
     "c.1.8",
     "c.2.18",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627375054541,
    "cells": [
     "c.1.8",
     "c.2.19",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627375174905,
    "cells": [
     "c.1.8",
     "c.2.20",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627388629222,
    "cells": [
     "c.1.8",
     "c.2.21",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627388749305,
    "cells": [
     "c.1.8",
     "c.2.22",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627388869372,
    "cells": [
     "c.1.8",
     "c.2.23",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627388989454,
    "cells": [
     "c.1.8",
     "c.2.24",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627389109529,
    "cells": [
     "c.1.8",
     "c.2.25",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627389350184,
    "cells": [
     "c.1.8",
     "c.2.26",
     "c.5.32",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627550689090,
    "cells": [
     "c.1.8",
     "c.2.26",
     "c.11.0",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10"
    ]
   },
   {
    "start_checkpoint": 1627643584778,
    "cells": [
     "c.1.8",
     "c.2.26",
     "c.11.0",
     "c.3.8",
     "c.4.10",
     "c.10.14",
     "c.9.10",
     "c.12.0"
    ]
   }
  ]
 },
 "codeCells": [
  {
   "output_histories": {
    "1": "o.1",
    "2": "o.2"
   },
   "artifact_name": "c.0",
   "versions": [
    {
     "start_checkpoint": 1626922576319,
     "parent": "n.0.0",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1626922650475,
     "parent": "n.0.1",
     "literal": "df_main = load_dataset(DATASET, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1626933946461,
     "parent": "n.0.8",
     "literal": "df_main = load_dataset(DATASET, FEATURE_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627060126624,
     "parent": "n.0.14",
     "literal": "df_main = load_dataset(DATASET, FEATURE_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n# NOTE: THE *DOWN DATASET IS VERY MESSY WHEN REDENOMINATION! PLEASE DROP ABNORMAL CHANG"
    }
   ]
  },
  {
   "output_histories": {
    "2": "o.0",
    "4": "o.7",
    "6": "o.22",
    "8": "o.26"
   },
   "artifact_name": "c.1",
   "versions": [
    {
     "start_checkpoint": 1626922576319,
     "parent": "n.0.0",
     "literal": "from pathlib import Path\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 13,
      "ch": 30
     }
    },
    {
     "start_checkpoint": 1626922650475,
     "parent": "n.0.1",
     "literal": "from pathlib import Path\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\""
    },
    {
     "start_checkpoint": 1626922896955,
     "parent": "n.0.15",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\""
    },
    {
     "start_checkpoint": 1627286802425,
     "parent": "n.0.17",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"CAKE/USDT\",\"KSM/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"GRT/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BAKE/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\",\"CELO/USDT\",\n    \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\"CRV/USDT\", \"FTT/USDT\", \"TFUEL/USDT\"\n]"
    },
    {
     "start_checkpoint": 1627286922484,
     "parent": "n.0.18",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nfrom typing import List\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"CAKE/USDT\",\"KSM/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"GRT/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BAKE/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\",\"CELO/USDT\",\n    \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\"CRV/USDT\", \"FTT/USDT\", \"TFUEL/USDT\"\n]"
    },
    {
     "start_checkpoint": 1627287288862,
     "parent": "n.0.24",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nfrom typing import List\n\nimport os\nimport wandb\nimport nest_asyncio\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"CAKE/USDT\",\"KSM/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"GRT/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BAKE/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\",\"CELO/USDT\",\n    \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\"CRV/USDT\", \"FTT/USDT\", \"TFUEL/USDT\"\n]"
    },
    {
     "start_checkpoint": 1627290708020,
     "parent": "n.0.41",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nfrom typing import List\n\nimport os\nimport wandb\nimport nest_asyncio\nimport pandas as pd\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"CAKE/USDT\",\"KSM/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"GRT/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BAKE/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\",\"CELO/USDT\",\n    \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\"CRV/USDT\", \"FTT/USDT\", \"TFUEL/USDT\"\n]"
    },
    {
     "start_checkpoint": 1627292029348,
     "parent": "n.0.51",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nfrom typing import List\n\nimport os\nimport wandb\nimport nest_asyncio\nimport pandas as pd\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"KSM/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\", \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\"CRV/USDT\", \"FTT/USDT\", \"TFUEL/USDT\"\n]"
    },
    {
     "start_checkpoint": 1627292059837,
     "parent": "n.0.98",
     "literal": "%load_ext autoreload\n%autoreload 2\n\nfrom pathlib import Path\nfrom typing import List\n\nimport os\nimport wandb\nimport nest_asyncio\nimport pandas as pd\n\nnest_asyncio.apply()\n\nwhile \"freqtrade\" not in os.listdir():\n    os.chdir(\"..\")\n    \nfrom freqtrade.nbtools.dataloader import load_dataset\n\nPATH_MOUNT = Path.cwd().parent / \"mount\"\nPATH_DATA = PATH_MOUNT / \"data\"\nBINANCE = PATH_DATA / \"binance\"\n\nPAIRS_HIGH_CAP = [\n    \"BTC/USDT\",\"ETH/USDT\",\"ADA/USDT\",\"BNB/USDT\",\"XRP/USDT\",\"DOT/USDT\",\"DOGE/USDT\",\"ZEC/USDT\",\"NANO/USDT\",\"NEO/USDT\",\n    \"UNI/USDT\",\"BCH/USDT\",\"LINK/USDT\",\"LTC/USDT\",\"MATIC/USDT\",\"XLM/USDT\",\"SOL/USDT\",\"ETC/USDT\",\"VET/USDT\",\"THETA/USDT\",\n    \"EOS/USDT\",\"TRX/USDT\",\"FIL/USDT\",\"XMR/USDT\",\"AAVE/USDT\",\"MKR/USDT\",\"ATOM/USDT\",\"ALGO/USDT\",\"KSM/USDT\", \"TFUEL/USDT\",\n    \"LUNA/USDT\",\"BTT/USDT\",\"AVAX/USDT\",\"COMP/USDT\",\"DASH/USDT\",\"DCR/USDT\",\"EGLD/USDT\",\"WAVES/USDT\",\"YFI/USDT\",\"XEM/USDT\",\n    \"CHZ/USDT\",\"SUSHI/USDT\",\"HOT/USDT\",\"ZIL/USDT\",\"SNX/USDT\",\"MANA/USDT\",\"ENJ/USDT\",\"HNT/USDT\",\"BAT/USDT\",\"NEAR/USDT\",\n    \"QTUM/USDT\",\"ONE/USDT\",\"ONT/USDT\",\"BNT/USDT\",\"ZRX/USDT\",\"FTM/USDT\",\"OMG/USDT\", \"ICX/USDT\",\"ANKR/USDT\",\"RVN/USDT\",\n    \"CRV/USDT\", \"FTT/USDT\", \n]"
    }
   ]
  },
  {
   "output_histories": {
    "7": "o.8",
    "8": "o.9",
    "9": "o.10",
    "10": "o.11",
    "11": "o.13",
    "13": "o.21",
    "14": "o.23"
   },
   "artifact_name": "c.2",
   "versions": [
    {
     "start_checkpoint": 1626922576319,
     "parent": "n.0.0",
     "literal": "\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\"\n\n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-down\"\nTIMEFRAME = \"5m\"\nDATASET = BINANCE.glob(f\"*DOWN_USDT-{TIMEFRAME}.json\")\nCOLUMNS_NOT_USE = []",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 15,
      "ch": 19
     }
    },
    {
     "start_checkpoint": 1626922896955,
     "parent": "n.0.15",
     "literal": "\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-down\"\nTIMEFRAME = \"5m\"\nDATASET = BINANCE.glob(f\"*DOWN_USDT-{TIMEFRAME}.json\")\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\""
    },
    {
     "start_checkpoint": 1627286442451,
     "parent": "n.0.15",
     "literal": "def get_dataset_paths() -> List[Path]:\n    \n\n\n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nDATASET = get_dataset_paths()\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\""
    },
    {
     "start_checkpoint": 1627286682355,
     "parent": "n.0.16",
     "literal": "def get_dataset_paths(path_data: Path, exchange: ) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange)\n\n\n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nDATASET = get_dataset_paths()\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\""
    },
    {
     "start_checkpoint": 1627286802425,
     "parent": "n.0.17",
     "literal": "def get_dataset_paths() -> List[Path]:\n    paths = []\n    for p in BINANCE.glob(\"*.json\"):\n        \n\n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths()\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\""
    },
    {
     "start_checkpoint": 1627286922484,
     "parent": "n.0.18",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(\"*.json\"):\n        if p.name.replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        if p.name\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-15\"\nOPT_START, OPT_END           = \"2021-05-16\", \"2021-06-15\"\nTEST_START, TEST_END         = \"2021-06-16\", \"2021-07-15\""
    },
    {
     "start_checkpoint": 1627287026858,
     "parent": "n.0.19",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(\"*.json\"):\n        if p.name.replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        if timeframe not in p.name:\n            continue\n        paths.append(p)\n        print(f\"Adding {p.name}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627287083641,
     "parent": "n.0.20",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(\"*.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        if timeframe not in p.name:\n            continue\n        paths.append(p)\n        print(f\"Adding {p.name}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627287111469,
     "parent": "n.0.21",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n        print(f\"Adding {p.name}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627287148531,
     "parent": "n.0.22",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {paths}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627287160571,
     "parent": "n.0.23",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {[it.name for it in paths]}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-01-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627287288862,
     "parent": "n.0.24",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {[it.name for it in paths]}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = []\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627288123291,
     "parent": "n.0.34",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {[it.name for it in paths]}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\"]\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627288168472,
     "parent": "n.0.35",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {[it.name for it in paths]}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"5m-next20m-spot\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"target\"]\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627291068916,
     "parent": "n.0.44",
     "literal": "def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n    paths = []\n    for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n        if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n            continue\n        paths.append(p)\n    print(f\"Pairs: {[it.name for it in paths]}\")\n    return paths\n            \n\"\"\" \nConfiguration\n\"\"\"\nNAME = \"catboost-5n20\"\nTIMEFRAME = \"5m\"\nEXCHANGE = \"binance\"\nDATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\nCOLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n\"\"\"\nDate <= Last 2 months: Train and Val (Shuffled val data)\nDate <= Last month   : Strategy optimization\nLast Month to Present: Unbiased backtesting\n\"\"\"\nTRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\nOPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\nTEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\""
    },
    {
     "start_checkpoint": 1627374574257,
     "parent": "n.0.86",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(self, path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    "
    },
    {
     "start_checkpoint": 1627374694337,
     "parent": "n.0.87",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, dataframe: pd.DataFrame):\n        \"\"\" Define the features of dataset \"\"\"\n        import talib.abstract as ta\n        import gc\n\n        # Avoid conflicting\n        new_df = dataframe.copy()\n\n        # Memory improvements\n        del dataframe\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n            new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n            new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n            new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n            new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n            new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n\n        new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n        new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n        new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n        return new_df\n\n    def add_labels(self, dataframe: pd.DataFrame):\n        \"\"\" Define the label (target prediction) of the data \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Avoid conflicting\n        new_df = dataframe.copy()\n\n        # Memory improvements\n        import gc\n        del dataframe\n        gc.collect()\n\n        future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n\n        # ML Target for EDA before Regularized\n        new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n\n        # Split the targets into several classes (Classificatioi)\n        new_df['ml_target'] = pd.qcut(new_df[\"ml_target\"], NUM_CLASSES, labels=False)\n\n        # Balance num of datas in every class\n        lengths_every_class = list(new_df.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        new_df_2 = pd.DataFrame()\n\n        for classname in new_df[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            new_df_2 = new_df_2.append(new_df.loc[new_df[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        new_df_2 = new_df_2.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n        del new_df\n        gc.collect()\n        return new_df_2\n\n    def post_processing(self, dataframe: pd.DataFrame)\n\n    df_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627374814391,
     "parent": "n.0.88",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the features of dataset \"\"\"\n        import talib.abstract as ta\n        import gc\n\n        # Avoid conflicting\n        df_copy = df_per_pair.copy()\n\n        # Memory improvements\n        del dataframe\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the label (target prediction) of the data \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Avoid conflicting\n        df_copy = df_per_pair.copy()\n\n        # Memory improvements\n        import gc\n        del dataframe\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame):\n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        new_df_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            new_df_2 = new_df_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        new_df_2 = new_df_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n    df_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627374934475,
     "parent": "n.0.89",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the features of dataset \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the label (target prediction) of the data \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame):\n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        new_df_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            new_df_2 = new_df_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        new_df_2 = new_df_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n    df_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627375054541,
     "parent": "n.0.90",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the features of dataset \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame):\n        \"\"\" Define the label (target prediction) of the data \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame):\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627375174905,
     "parent": "n.0.91",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627388629222,
     "parent": "n.0.92",
     "literal": "class TrainingConfiguration:\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset. Called after getting data per pair. \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data. Called after add_features() \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Extra processing of the combined data (all pa) \"\"\"\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627388749305,
     "parent": "n.0.93",
     "literal": "class TrainingConfiguration:\n    \"\"\"\n    Where the data flows:\n    1. get_dataset_paths() -> List[Path]\n    2. for every path to data json, load data to dataframe. one dataframe is one pair.\n    3. for every pair:\n        3.1 \n    \"\"\"\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset. Called after getting data per pair. \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data. Called after add_features() \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Extra processing of the combined data (all pairs). Called after add_labels() \"\"\"\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627388869372,
     "parent": "n.0.94",
     "literal": "class TrainingConfiguration:\n    \"\"\"\n    Where the data flows:\n    1. get_dataset_paths() -> List[Path]\n    2. for every path to data json, load data to dataframe. one dataframe is one pair.\n    3. for every pair dataframe:\n        3.1 add_features()\n        3.2 add_labels()\n    4. the full dataframe of all pairs is returned. call post_processing()\n    5. if you are on notebook, you can EDA that returned dataframe.\n    6. \n    \"\"\"\n\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset. Called after getting data per pair. \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data. Called after add_features() \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Extra processing of the combined data (all pairs). Called after add_labels() \"\"\"\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627388989454,
     "parent": "n.0.95",
     "literal": "class TrainingConfiguration:\n    \"\"\"\n    Where the data flows:\n    1. get_dataset_paths() -> List[Path]\n    2. for every path to data json, load data to dataframe. one dataframe is one pair.\n    3. for every pair dataframe:\n        3.1 add_features()\n        3.2 add_labels()\n    4. the full dataframe of all pairs is returned. call post_processing()\n    5. if you are on notebook, you can EDA that returned dataframe.\n    6. training_pipeline()\n    7. every training step: training_step()\n    \"\"\"\n    @staticmethod\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset. Called after getting data per pair. \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data. Called after add_features() \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Extra processing of the combined data (all pairs). Called after add_labels() \"\"\"\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627389109529,
     "parent": "n.0.96",
     "literal": "class TrainingConfiguration:\n    \"\"\"\n    Where the data flows:\n    1. get_dataset_paths() -> List[Path]\n    2. for every path to data json, load data to dataframe. one dataframe is one pair.\n    3. for every pair dataframe:\n        3.1 add_features()\n        3.2 add_labels()\n    4. the full dataframe of all pairs is returned. call post_processing()\n    5. if you are on notebook, you can EDA that returned dataframe.\n    6. training_pipeline()\n    7. every training step: training_step()\n    \"\"\"\n    @staticmethod\n    def get_dataset_paths(path_data: Path, exchange: Path, timeframe: str) -> List[Path]:\n        paths = []\n        for p in (path_data / exchange).glob(f\"*-{timeframe}.json\"):\n            if p.name.split(\"-\")[0].replace(\"_\", \"/\") not in PAIRS_HIGH_CAP:\n                continue\n            paths.append(p)\n        print(f\"Pairs: {[it.name for it in paths]}\")\n        return paths\n\n    \"\"\" \n    Configuration\n    \"\"\"\n    NAME = \"catboost-5n20\"\n    TIMEFRAME = \"5m\"\n    EXCHANGE = \"binance\"\n    DATASET = get_dataset_paths(PATH_DATA, EXCHANGE, TIMEFRAME)\n    COLUMNS_NOT_USE = [\"date\", \"open\", \"high\", \"low\", \"close\", \"volume\", \"pair\", \"ml_target\", \"ml_target_real\"]\n\n    \"\"\"\n    Date <= Last 2 months: Train and Val (Shuffled val data)\n    Date <= Last month   : Strategy optimization\n    Last Month to Present: Unbiased backtesting\n    \"\"\"\n    TRAINVAL_START, TRAINVAL_END = \"2021-03-01\", \"2021-05-26\"\n    OPT_START, OPT_END           = \"2021-05-26\", \"2021-06-26\"\n    TEST_START, TEST_END         = \"2021-06-26\", \"2021-07-26\"\n    \n    def add_features(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the features of dataset. Called after load data of this pair. \"\"\"\n        import talib.abstract as ta\n\n        # Memory improvements\n        import gc\n        df_copy = df_per_pair.copy()\n        del df_per_pair\n        gc.collect()\n\n        # Start add features:\n        spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n        for i in spaces:\n            df_copy[f\"ml_smadiff_{i}\"] = (df_copy['close'].rolling(i).mean() - df_copy['close'])\n            df_copy[f\"ml_maxdiff_{i}\"] = (df_copy['close'].rolling(i).max() - df_copy['close'])\n            df_copy[f\"ml_mindiff_{i}\"] = (df_copy['close'].rolling(i).min() - df_copy['close'])\n            df_copy[f\"ml_std_{i}\"] = df_copy['close'].rolling(i).std()\n            df_copy[f\"ml_ma_{i}\"] = df_copy['close'].pct_change(i).rolling(i).mean()\n            df_copy[f\"ml_rsi_{i}\"] = ta.RSI(df_copy[\"close\"], timeperiod=i)\n\n        df_copy['ml_bop'] = ta.BOP(df_copy['open'], df_copy['high'], df_copy['low'], df_copy['close'])\n        df_copy[\"ml_volume_pctchange\"] = df_copy['volume'].pct_change()\n        df_copy['ml_z_score_120'] = ((df_copy[\"ml_ma_15\"] - df_copy[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                             / (df_copy[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n\n        # Performance improvements\n        df_copy = df_copy.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        return df_copy\n\n    def add_labels(self, df_per_pair: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Define the label (target prediction) of the data. Called after add_features() \"\"\"\n        NUM_FUTURE_CANDLES = 4\n        NUM_CLASSES = 3\n\n        # Memory improvements\n        df_copy = df_per_pair.copy()\n        import gc\n        del df_per_pair\n        gc.collect()\n\n        future_price = df_copy['close'].shift(-NUM_FUTURE_CANDLES)\n\n        # ML Target Regularized\n        df_copy[\"ml_target\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # ML Target for EDA before Regularized\n        df_copy[\"ml_target_real\"] = (future_price - df_copy['close']) / df_copy['close']\n\n        # Split the targets into several classes (Classificatioi)\n        df_copy['ml_target'] = pd.qcut(df_copy[\"ml_target\"], NUM_CLASSES, labels=False)\n        \n        return df_copy\n\n    def post_processing(self, df_allpairs: pd.DataFrame) -> pd.DataFrame:\n        \"\"\" Extra processing of the combined data (all pairs). Called after add_labels() \"\"\"\n        # Memory improvements\n        df_copy = df_allpairs.copy()\n        import gc\n        del df_allpairs\n        gc.collect()\n        \n        # Balance num of datas in every class\n        lengths_every_class = list(df_copy.groupby(by=[\"ml_target\"]).count()[\"date\"])\n        df_copy_2 = pd.DataFrame()\n\n        for classname in df_copy[\"ml_target\"].unique():\n            minimum_of_all = min(lengths_every_class)\n            df_copy_2 = df_copy_2.append(df_copy.loc[df_copy[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n\n        # Performance improvements\n        df_copy_2 = df_copy_2.astype({col: \"float32\" for col in df_copy.columns if \"float\" in str(df_copy[col].dtype)})\n        del df_copy\n        gc.collect()\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627389350184,
     "parent": "n.0.98",
     "literal": "\n\n        \ntrain = TrainingConfiguration()\ndf_exp = load_dataset(DATASET, add_features, add_labels, TRAINVAL_START, TRAINVAL_END)"
    }
   ]
  },
  {
   "output_histories": {
    "3": "o.3",
    "5": "o.4",
    "6": "o.5",
    "7": "o.18",
    "8": "o.31"
   },
   "artifact_name": "c.3",
   "versions": [
    {
     "start_checkpoint": 1626922650475,
     "parent": "n.0.1",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1626924275331,
     "parent": "n.0.5",
     "literal": "c = get_config()\nc"
    },
    {
     "start_checkpoint": 1626933765702,
     "parent": "n.0.6",
     "literal": "df_main"
    },
    {
     "start_checkpoint": 1626933959221,
     "parent": "n.0.9",
     "literal": "df_main.head()"
    },
    {
     "start_checkpoint": 1626934186590,
     "parent": "n.0.11",
     "literal": "len(df)\ndf_main.head()"
    },
    {
     "start_checkpoint": 1626934219133,
     "parent": "n.0.12",
     "literal": "print(\"Dataframe Length:\", len(df_main))\ndisplay(df_main.head())"
    },
    {
     "start_checkpoint": 1626934228571,
     "parent": "n.0.15",
     "literal": "print(\"Dataframe Rows:\", len(df_main))\ndisplay(df_main.head())"
    },
    {
     "start_checkpoint": 1627287819910,
     "parent": "n.0.30",
     "literal": "print(\"Dataframe Rows:\", len(df_main))\ndf_main.head()"
    },
    {
     "start_checkpoint": 1627292870919,
     "parent": "n.0.98",
     "literal": "print(\"Dataframe Rows:\", len(df_exp))\ndf_exp.head()"
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.14",
    "3": "o.15",
    "4": "o.16",
    "5": "o.17",
    "6": "o.19",
    "8": "o.20",
    "9": "o.25",
    "10": "o.32"
   },
   "artifact_name": "c.4",
   "versions": [
    {
     "start_checkpoint": 1626924275331,
     "parent": "n.0.15",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1627287451043,
     "parent": "n.0.25",
     "literal": "df_main.info()"
    },
    {
     "start_checkpoint": 1627287642964,
     "parent": "n.0.26",
     "literal": "df_main.info()\ndf_main.astype({key: \"float16\" for key in df_main})"
    },
    {
     "start_checkpoint": 1627287668739,
     "parent": "n.0.27",
     "literal": "df_main.info()\ndf_main = df_main.astype({col: \"float16\" for col in df_main.columns if col == \"float64\"})\ndf_main.info()"
    },
    {
     "start_checkpoint": 1627287704741,
     "parent": "n.0.28",
     "literal": "df_main.info()\ndf_main = df_main.astype({col: \"float16\" for col in df_main.columns if df_main[col].dtype == \"float64\"})\ndf_main.info()"
    },
    {
     "start_checkpoint": 1627287819910,
     "parent": "n.0.30",
     "literal": "df_main.info()"
    },
    {
     "start_checkpoint": 1627287949807,
     "parent": "n.0.32",
     "literal": "df_main = df_main.astype({col: \"float32\" for col in df_main.columns if df_main[col].dtype == \"float64\"})\ndf_main.info()"
    },
    {
     "start_checkpoint": 1627288003220,
     "parent": "n.0.33",
     "literal": "df_main.info()"
    },
    {
     "start_checkpoint": 1627288123291,
     "parent": "n.0.34",
     "literal": "# Make sure datatypes are float32 \ndf_main.info()"
    },
    {
     "start_checkpoint": 1627289209049,
     "parent": "n.0.39",
     "literal": "# Make sure float datatypes are float32 \ndf_main.info()"
    },
    {
     "start_checkpoint": 1627292870919,
     "parent": "n.0.98",
     "literal": "# Make sure float datatypes are float32 \ndf_exp.info()"
    }
   ]
  },
  {
   "output_histories": {
    "29": "o.30",
    "32": "o.41"
   },
   "artifact_name": "c.5",
   "versions": [
    {
     "start_checkpoint": 1626933765702,
     "parent": "n.0.6",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1626933924555,
     "parent": "n.0.7",
     "literal": "def feature_function(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_dataframe = dataframe.copy()\n    del new_dataframe\n    gc.collect()\n    return dataframe"
    },
    {
     "start_checkpoint": 1626933946461,
     "parent": "n.0.8",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_dataframe = dataframe.copy()\n    del new_dataframe\n    gc.collect()\n    return dataframe"
    },
    {
     "start_checkpoint": 1626933959221,
     "parent": "n.0.15",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_dataframe = dataframe.copy()\n    \n    del dataframe\n    gc.collect()\n    \n    # Start adding features...\n    new_dataframe[\"ma_5\"] = new_dataframe[\"close\"].rolling(5).mean()\n    \n    return new_dataframe"
    },
    {
     "start_checkpoint": 1627287160571,
     "parent": "n.0.23",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_dataframe = dataframe.copy()\n    \n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_dataframe[\"pct_change\"] = new_dataframe[\"close\"].rolling(5).mean()\n    \n    return new_dataframe"
    },
    {
     "start_checkpoint": 1627287288862,
     "parent": "n.0.24",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_dataframe = dataframe.copy()\n    \n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_dataframe[\"pct_change\"] = new_dataframe[\"close\"].pct_change()\n    \n    return new_dataframe"
    },
    {
     "start_checkpoint": 1627287704741,
     "parent": "n.0.28",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_df = dataframe.copy()\n    \n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df = new_df.astype({col: \"float16\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    return new_df"
    },
    {
     "start_checkpoint": 1627287764737,
     "parent": "n.0.29",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_df = dataframe.copy()\n    \n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    return new_df"
    },
    {
     "start_checkpoint": 1627287819910,
     "parent": "n.0.30",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    new_df = dataframe.copy()\n#     new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    \n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    return new_df"
    },
    {
     "start_checkpoint": 1627287949807,
     "parent": "n.0.32",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting + performance improvements\n    new_df = dataframe.copy()\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    return new_df"
    },
    {
     "start_checkpoint": 1627288123291,
     "parent": "n.0.34",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as \n    import gc\n    \n    # Avoid conflicting + performance improvements\n    new_df = dataframe.copy()\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    return new_df\n\ndef TARGET_FUNCTION(dataframe):\n    \"\"\" Define the target / label \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627288628925,
     "parent": "n.0.36",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting + performance improvements\n    new_df = dataframe.copy()\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    return new_df\n\ndef TARGET_FUNCTION(dataframe):\n    \"\"\" Define the target / label \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627288843919,
     "parent": "n.0.37",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting + performance improvements\n    new_df = dataframe.copy()\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627289032240,
     "parent": "n.0.38",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features...\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if new_df[col].dtype == \"float64\"})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627289209049,
     "parent": "n.0.39",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    new_df[\"pct_change\"] = new_df[\"close\"].pct_change()\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627290587956,
     "parent": "n.0.40",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 8, 13, 21, 55, 100, 200, 500]\n    for i in spaces:\n        df[f\"ml_smadiff_{i}\"] = (df['close'].rolling(i).mean() - df['close'])\n        df[f\"ml_maxdiff_{i}\"] = (df['close'].rolling(i).max() - df['close'])\n        df[f\"ml_mindiff_{i}\"] = (df['close'].rolling(i).min() - df['close'])\n        df[f\"ml_std_{i}\"] = df['close'].rolling(i).std()\n        df[f\"ml_ma_{i}\"] = df['close'].pct_change(i).rolling(i).mean()\n        df[f\"ml_rsi_{i}\"] = ta.RSI(df[\"close\"], timeperiod=i) / 100\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627290708020,
     "parent": "n.0.41",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    pass"
    },
    {
     "start_checkpoint": 1627290828086,
     "parent": "n.0.42",
     "literal": "def FEATURE_FUNCTION(dataframe):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_13 - new_df.ma_13.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_13.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame, num_future_candles: int):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-num_future_candles)\n    df[\"ml_target\"] = (future_price - df['close']) / df['close']\n    df[\"ml_target_real\"] = (future_price - df['close']) / df['close']\n    pass"
    },
    {
     "start_checkpoint": 1627290948160,
     "parent": "n.0.43",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_13 - new_df.ma_13.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_13.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame, num_future_candles: int):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-num_future_candles)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    return new"
    },
    {
     "start_checkpoint": 1627291068916,
     "parent": "n.0.44",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_13 - new_df.ma_13.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_13.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame, num_future_candles: int):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-num_future_candles)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291188967,
     "parent": "n.0.45",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_13 - new_df.ma_13.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_13.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    B\n    \n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-num_future_candles)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291305112,
     "parent": "n.0.46",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_13 - new_df.ma_13.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_13.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291359016,
     "parent": "n.0.47",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df.ma_15 - new_df.ma_15.rolling(21).mean() + 1e-9) \n                         / (new_df.ma_15.rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291390122,
     "parent": "n.0.48",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291413240,
     "parent": "n.0.49",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in new_df[col].dtype})\n    return new_df"
    },
    {
     "start_checkpoint": 1627291522537,
     "parent": "n.0.50",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df"
    },
    {
     "start_checkpoint": 1627292141436,
     "parent": "n.0.55",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndf_main = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627292870919,
     "parent": "n.0.60",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627372403379,
     "parent": "n.0.68",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    NUM_CLASSES = 3\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Split the targets into several classes\n    new_df['ml_target'] = pd.qcut(new_df.target, NUM_CLASSES, labels=False)\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627372609849,
     "parent": "n.0.69",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    NUM_CLASSES = 3\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Split the targets into several classes\n    new_df['ml_target'] = pd.qcut(new_df[\"ml_target\"], NUM_CLASSES, labels=False)\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627373837790,
     "parent": "n.0.82",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    NUM_CLASSES = 3\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Split the targets into several classes (Classificatioi)\n    new_df['ml_target'] = pd.qcut(new_df[\"ml_target\"], NUM_CLASSES, labels=False)\n    # Balance num of datas in every class\n    lengths_every_class = list(df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"])\n    df_exp_2 = pd.DataFrame()\n\n    for classname in df_exp[\"ml_target\"].unique():\n        minimum_of_all = min(lengths_every_class)\n        df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n    \n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627374334117,
     "parent": "n.0.83",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    NUM_CLASSES = 3\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Split the targets into several classes (Classificatioi)\n    new_df['ml_target'] = pd.qcut(new_df[\"ml_target\"], NUM_CLASSES, labels=False)\n    \n    # Balance num of datas in every class\n    lengths_every_class = list(new_df.groupby(by=[\"ml_target\"]).count()[\"date\"])\n    new_df_2 = pd.DataFrame()\n\n    for classname in df_exp[\"ml_target\"].unique():\n        minimum_of_all = min(lengths_every_class)\n        new_df_2 = new_df_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df_2\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627374454189,
     "parent": "n.0.84",
     "literal": "def FEATURE_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the features of dataset \"\"\"\n    import talib.abstract as ta\n    import gc\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    del dataframe\n    gc.collect()\n    \n    # Start add features:\n    spaces = [3, 5, 9, 15, 25, 50, 100, 200, 500]\n    for i in spaces:\n        new_df[f\"ml_smadiff_{i}\"] = (new_df['close'].rolling(i).mean() - new_df['close'])\n        new_df[f\"ml_maxdiff_{i}\"] = (new_df['close'].rolling(i).max() - new_df['close'])\n        new_df[f\"ml_mindiff_{i}\"] = (new_df['close'].rolling(i).min() - new_df['close'])\n        new_df[f\"ml_std_{i}\"] = new_df['close'].rolling(i).std()\n        new_df[f\"ml_ma_{i}\"] = new_df['close'].pct_change(i).rolling(i).mean()\n        new_df[f\"ml_rsi_{i}\"] = ta.RSI(new_df[\"close\"], timeperiod=i)\n    \n    new_df['ml_bop'] = ta.BOP(new_df['open'], new_df['high'], new_df['low'], new_df['close'])\n    new_df[\"ml_volume_pctchange\"] = new_df['volume'].pct_change()\n    new_df['ml_z_score_120'] = ((new_df[\"ml_ma_15\"] - new_df[\"ml_ma_15\"].rolling(21).mean() + 1e-9) \n                         / (new_df[\"ml_ma_15\"].rolling(21).std() + 1e-9))\n    \n    # Performance improvements\n    new_df = new_df.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    return new_df\n\n\ndef LABEL_FUNCTION(dataframe: pd.DataFrame):\n    \"\"\" Define the label (target prediction) of the data \"\"\"\n    NUM_FUTURE_CANDLES = 4\n    NUM_CLASSES = 3\n    \n    # Avoid conflicting\n    new_df = dataframe.copy()\n    \n    # Memory improvements\n    import gc\n    del dataframe\n    gc.collect()\n    \n    future_price = new_df['close'].shift(-NUM_FUTURE_CANDLES)\n    \n    # ML Target Regularized\n    new_df[\"ml_target\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # ML Target for EDA before Regularized\n    new_df[\"ml_target_real\"] = (future_price - new_df['close']) / new_df['close']\n    \n    # Split the targets into several classes (Classificatioi)\n    new_df['ml_target'] = pd.qcut(new_df[\"ml_target\"], NUM_CLASSES, labels=False)\n    \n    # Balance num of datas in every class\n    lengths_every_class = list(new_df.groupby(by=[\"ml_target\"]).count()[\"date\"])\n    new_df_2 = pd.DataFrame()\n\n    for classname in new_df[\"ml_target\"].unique():\n        minimum_of_all = min(lengths_every_class)\n        new_df_2 = new_df_2.append(new_df.loc[new_df[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n    # Performance improvements\n    new_df_2 = new_df_2.astype({col: \"float32\" for col in new_df.columns if \"float\" in str(new_df[col].dtype)})\n    del new_df\n    gc.collect()\n    return new_df_2\n\n\ndf_exp = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.6",
    "1": "o.12",
    "2": "o.24"
   },
   "artifact_name": "c.6",
   "versions": [
    {
     "start_checkpoint": 1627286442451,
     "parent": "n.0.15",
     "literal": "df_main = load_dataset(DATASET, FEATURE_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n\n# NOTE: THE *DOWN DATASET IS VERY MESSY WHEN REDENOMINATION! PLEASE DROP ABNORMAL CHANGES THEN IMPUTE.\n# NOTE: THE *DOWN DATASET IS VERY MESSY WHEN REDENOMINATION! PLEASE DROP ABNORMAL CHANGES THEN IMPUTE.\n# NOTE: THE *DOWN DATASET IS VERY MESSY WHEN REDENOMINATION! PLEASE DROP ABNORMAL CHANGES THEN IMPUTE.",
     "start": {
      "line": 0,
      "ch": 0
     },
     "end": {
      "line": 4,
      "ch": 101
     }
    },
    {
     "start_checkpoint": 1627287160571,
     "parent": "n.0.23",
     "literal": "df_main = load_dataset(DATASET, FEATURE_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627291068916,
     "parent": "n.0.44",
     "literal": "df_main = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    }
   ]
  },
  {
   "output_histories": {
    "2": "o.27"
   },
   "artifact_name": "c.7",
   "versions": [
    {
     "start_checkpoint": 1627287451043,
     "parent": "n.0.25",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1627292141436,
     "parent": "n.0.55",
     "literal": "df_main = df_main.sample(frac=1).reset_index(drop=True)"
    },
    {
     "start_checkpoint": 1627292408655,
     "parent": "n.0.56",
     "literal": "# Shuffle the dataframe\ndf_main = df_main.sample(frac=1).reset_index(drop=True)\ndf_main.head()"
    }
   ]
  },
  {
   "output_histories": {
    "2": "o.28",
    "3": "o.29"
   },
   "artifact_name": "c.8",
   "versions": [
    {
     "start_checkpoint": 1627292141436,
     "parent": "n.0.55",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1627292408655,
     "parent": "n.0.56",
     "literal": "ax = df_main.loc[df_main.stock=='BTC_USDT', 'close'].plot(figsize=(12,8))\ndf.loc[df.stock=='BTC_USDT', 'close'].rolling(30).std().plot(ax=ax, secondary_y=True)"
    },
    {
     "start_checkpoint": 1627292538458,
     "parent": "n.0.57",
     "literal": "ax = df_main.loc[df_main.pair=='BTC/USDT', 'close'].plot(figsize=(12,8))\ndf_main.loc[df_main.pair=='BTC/USDT', 'close'].rolling(30).std().plot(ax=ax, secondary_y=True)"
    },
    {
     "start_checkpoint": 1627292563732,
     "parent": "n.0.58",
     "literal": "ax = df_main.loc[df_main.pair=='BTC/USDT', 'close'].iloc[:500].plot(figsize=(12,8))\ndf_main.loc[df_main.pair=='BTC/USDT', 'close'].iloc[:500].rolling(30).std().plot(ax=ax, secondary_y=True)"
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.9",
   "versions": [
    {
     "start_checkpoint": 1627292408655,
     "parent": "n.0.56",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1627292563732,
     "parent": "n.0.58",
     "literal": "def training_pipeline():\n    \"\"\" After \"\"\""
    },
    {
     "start_checkpoint": 1627292749916,
     "parent": "n.0.59",
     "literal": "def training_pipeline(run):\n    \"\"\" After done explorating and correcting dataset, call this.\"\"\"\n    global df_exp\n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)"
    },
    {
     "start_checkpoint": 1627292870919,
     "parent": "n.0.60",
     "literal": "def training_pipeline(run):\n    \"\"\" After done explorating and correcting dataset, call this.\"\"\"\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    "
    },
    {
     "start_checkpoint": 1627292991012,
     "parent": "n.0.61",
     "literal": "def training_pipeline(run):\n    \"\"\" After done explorating and correcting dataset, call this.\"\"\"\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    X = \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.33, random_state=1)"
    },
    {
     "start_checkpoint": 1627293111096,
     "parent": "n.0.62",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    },
    {
     "start_checkpoint": 1627293351918,
     "parent": "n.0.63",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    from catboost import CatBoostClassifier\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    # Save memory\n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    },
    {
     "start_checkpoint": 1627293593920,
     "parent": "n.0.64",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    # TODO: Neural Network prediction as a feature to Catboost\n    from catboost import CatBoostClassifier\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    # Save memory\n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    },
    {
     "start_checkpoint": 1627293714926,
     "parent": "n.0.65",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    \n    # TODO: Neural Network prediction as a feature for Catboost\n    # TODO: Add `Reinforcement Learning` layer\n\n    from catboost import CatBoostClassifier\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    # Save memory\n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    },
    {
     "start_checkpoint": 1627293956926,
     "parent": "n.0.66",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    \n    # TODO: Neural Network prediction as a feature for Catboost\n    # TODO: Add `Reinforcement Learning` layer below\n    # -> https://github.com/THINK989/Real-Time-Stock-Market-Prediction-using-Ensemble-DL-and-Rainbow-DQN\n\n    from catboost import CatBoostClassifier\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    # Save memory\n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    },
    {
     "start_checkpoint": 1627298147955,
     "parent": "n.0.98",
     "literal": "def training_pipeline(run):\n    \"\"\" After done exploring and correcting dataset, call this function.\"\"\"\n    \n    # TODO: Split num of data equally to number of classes (if classification)\n    # TODO: Neural Network prediction as a feature for Catboost\n    # TODO: Add `Reinforcement Learning` layer below\n    # -> https://github.com/THINK989/Real-Time-Stock-Market-Prediction-using-Ensemble-DL-and-Rainbow-DQN\n\n    from catboost import CatBoostClassifier\n    from sklearn.model_selection import train_test_split\n    import gc\n    \n    # Save memory\n    global df_exp\n    del df_exp\n    gc.collect()\n    \n    df_all = load_dataset(DATASET, FEATURE_FUNCTION, LABEL_FUNCTION, TRAINVAL_START, TRAINVAL_END)\n    df_all = df_all.sample(frac=1).reset_index(drop=True)\n    \n    col_use = [col for col in df_all.columns if col not in COLUMNS_NOT_USE]\n    \n    X = df_all[col_use]\n    y = df_all[\"ml_target\"]\n    \n    X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=1)"
    }
   ]
  },
  {
   "output_histories": {
    "1": "o.33",
    "2": "o.34",
    "8": "o.35",
    "9": "o.36",
    "10": "o.37",
    "11": "o.38",
    "12": "o.39",
    "13": "o.40",
    "14": "o.42"
   },
   "artifact_name": "c.10",
   "versions": [
    {
     "start_checkpoint": 1627372609849,
     "parent": "n.0.69",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    },
    {
     "start_checkpoint": 1627372714315,
     "parent": "n.0.70",
     "literal": "df_exp.groupby(by=[\"ml_target\"])"
    },
    {
     "start_checkpoint": 1627372723034,
     "parent": "n.0.71",
     "literal": "df_exp.groupby(by=[\"ml_target\"]).count()"
    },
    {
     "start_checkpoint": 1627372773500,
     "parent": "n.0.72",
     "literal": "df_exp.groupby(by=[\"ml_target\"]).count()\n# Balance b\nfor"
    },
    {
     "start_checkpoint": 1627372893566,
     "parent": "n.0.73",
     "literal": "df_exp.groupby(by=[\"ml_target\"]).count()\n\n# Balance num of datas in every class\nfor clz"
    },
    {
     "start_checkpoint": 1627373253636,
     "parent": "n.0.74",
     "literal": "df_exp.groupby(by=[\"ml_target\"]).count()\ndf_ext_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nfor classname in df_exp[\"ml_target\"].unique():\n    df_ext_2 = df_ext_2"
    },
    {
     "start_checkpoint": 1627373373713,
     "parent": "n.0.75",
     "literal": "df_exp.groupby(by=[\"ml_target\"]).count()\ndf_ext_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nfor classname in df_exp[\"ml_target\"].unique():\n    minimum_of_all = min([it for it in len(df_exp.loc)])\n    df_ext_2 = df_ext_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[])"
    },
    {
     "start_checkpoint": 1627373493782,
     "parent": "n.0.76",
     "literal": "df_exp_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nlengths_every_class = it for it in len(df_exp.loc[df_exp[\"ml_target\"] == classname, :])\n\nfor classname in df_exp[\"ml_target\"].unique():\n    minimum_of_all = min()\n    df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \ndf_exp_2.groupby(by=[\"ml_target\"])"
    },
    {
     "start_checkpoint": 1627373578373,
     "parent": "n.0.77",
     "literal": "df_exp_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nlengths_every_class = list(df_exp.groupby(by=[\"ml_target\"]).count())\n\n# for classname in df_exp[\"ml_target\"].unique():\n#     minimum_of_all = min()\n#     df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n# df_exp_2.groupby(by=[\"ml_target\"])\nlengths_every_class"
    },
    {
     "start_checkpoint": 1627373748038,
     "parent": "n.0.78",
     "literal": "df_exp_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nlengths_every_class = df_exp.groupby(by=[\"ml_target\"]).count()\n\n# for classname in df_exp[\"ml_target\"].unique():\n#     minimum_of_all = min()\n#     df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n# df_exp_2.groupby(by=[\"ml_target\"])\nlengths_every_class"
    },
    {
     "start_checkpoint": 1627373769966,
     "parent": "n.0.79",
     "literal": "df_exp_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nlengths_every_class = df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"]\n\n# for classname in df_exp[\"ml_target\"].unique():\n#     minimum_of_all = min()\n#     df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n# df_exp_2.groupby(by=[\"ml_target\"])\nlengths_every_class"
    },
    {
     "start_checkpoint": 1627373781332,
     "parent": "n.0.80",
     "literal": "df_exp_2 = pd.DataFrame()\n\n# Balance num of datas in every class\nlengths_every_class = list(df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"])\n\n# for classname in df_exp[\"ml_target\"].unique():\n#     minimum_of_all = min()\n#     df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \n# df_exp_2.groupby(by=[\"ml_target\"])\nlengths_every_class"
    },
    {
     "start_checkpoint": 1627373821079,
     "parent": "n.0.81",
     "literal": "# Balance num of datas in every class\nlengths_every_class = list(df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"])\ndf_exp_2 = pd.DataFrame()\n\nfor classname in df_exp[\"ml_target\"].unique():\n    minimum_of_all = min(lengths_every_class)\n    df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \ndf_exp_2.groupby(by=[\"ml_target\"]).count()[\"date\"]"
    },
    {
     "start_checkpoint": 1627373837790,
     "parent": "n.0.82",
     "literal": "# Balance num of datas in every class\nlengths_every_class = list(df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"])\ndf_exp_2 = pd.DataFrame()\n\nfor classname in df_exp[\"ml_target\"].unique():\n    minimum_of_all = min(lengths_every_class)\n    df_exp_2 = df_exp_2.append(df_exp.loc[df_exp[\"ml_target\"] == classname, :].iloc[:minimum_of_all])\n    \ndisplay(df_exp_2.groupby(by=[\"ml_target\"]).count()[\"date\"])\ndisplay(df_exp_2)"
    },
    {
     "start_checkpoint": 1627374475357,
     "parent": "n.0.98",
     "literal": "display(df_exp.groupby(by=[\"ml_target\"]).count()[\"date\"])"
    }
   ]
  },
  {
   "output_histories": {
    "0": "o.43"
   },
   "artifact_name": "c.11",
   "versions": [
    {
     "start_checkpoint": 1627550689090,
     "parent": "n.0.98",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  },
  {
   "output_histories": {},
   "artifact_name": "c.12",
   "versions": [
    {
     "start_checkpoint": 1627643584778,
     "parent": "n.0.99",
     "start": {
      "line": 1,
      "ch": 0
     },
     "end": {
      "line": 1,
      "ch": 0
     }
    }
   ]
  }
 ],
 "markdownCells": [],
 "rawCells": [],
 "snippets": [],
 "output": [
  {
   "artifact_name": "o.0",
   "versions": [
    {
     "start_checkpoint": 1626922902383,
     "parent": "c.1.2",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1626922918432,
     "parent": "c.1.2",
     "raw": []
    },
    {
     "start_checkpoint": 1626924275331,
     "parent": "c.1.2",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1626933765702,
     "parent": "c.1.2",
     "raw": []
    },
    {
     "start_checkpoint": 1626933959221,
     "parent": "c.1.2",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.1",
   "versions": [
    {
     "start_checkpoint": 1626922918432,
     "parent": "c.0.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: 1INCHDOWN_USDT-5m.json\nLoading: AAVEDOWN_USDT-5m.json\nLoading: ADADOWN_USDT-5m.json\nLoading: BCHDOWN_USDT-5m.json\nLoading: BNBDOWN_USDT-5m.json\nLoading: BTCDOWN_USDT-5m.json\nLoading: DOTDOWN_USDT-5m.json\nLoading: EOSDOWN_USDT-5m.json\nLoading: ETHDOWN_USDT-5m.json\nLoading: FILDOWN_USDT-5m.json\nLoading: LINKDOWN_USDT-5m.json\nLoading: LTCDOWN_USDT-5m.json\nLoading: SUSHIDOWN_USDT-5m.json\nLoading: SXPDOWN_USDT-5m.json\nLoading: TRXDOWN_USDT-5m.json\nLoading: UNIDOWN_USDT-5m.json\nLoading: XLMDOWN_USDT-5m.json\nLoading: XRPDOWN_USDT-5m.json\nLoading: XTZDOWN_USDT-5m.json\nLoading: YFIDOWN_USDT-5m.json\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.2",
   "versions": [
    {
     "start_checkpoint": 1626933959221,
     "parent": "c.0.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: 1INCHDOWN_USDT-5m.json\nLoading: AAVEDOWN_USDT-5m.json\nLoading: ADADOWN_USDT-5m.json\nLoading: BCHDOWN_USDT-5m.json\nLoading: BNBDOWN_USDT-5m.json\nLoading: BTCDOWN_USDT-5m.json\nLoading: DOTDOWN_USDT-5m.json\nLoading: EOSDOWN_USDT-5m.json\nLoading: ETHDOWN_USDT-5m.json\nLoading: FILDOWN_USDT-5m.json\nLoading: LINKDOWN_USDT-5m.json\nLoading: LTCDOWN_USDT-5m.json\nLoading: SUSHIDOWN_USDT-5m.json\nLoading: SXPDOWN_USDT-5m.json\nLoading: TRXDOWN_USDT-5m.json\nLoading: UNIDOWN_USDT-5m.json\nLoading: XLMDOWN_USDT-5m.json\nLoading: XRPDOWN_USDT-5m.json\nLoading: XTZDOWN_USDT-5m.json\nLoading: YFIDOWN_USDT-5m.json\nFinished loading\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.3",
   "versions": [
    {
     "start_checkpoint": 1626933959221,
     "parent": "c.3.3",
     "raw": [
      {
       "execution_count": 9,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                 date   open   high    low  close   volume            pair\n0 2021-04-15 07:20:00  10.00  10.23  10.00  10.23  3790.45  1INCHDOWN/USDT\n1 2021-04-15 07:25:00  10.25  10.25  10.12  10.14  2278.35  1INCHDOWN/USDT\n2 2021-04-15 07:30:00  10.12  10.25  10.05  10.24   759.88  1INCHDOWN/USDT\n3 2021-04-15 07:35:00  10.24  10.24  10.13  10.22   588.77  1INCHDOWN/USDT\n4 2021-04-15 07:40:00  10.22  10.25  10.20  10.25   158.92  1INCHDOWN/USDT",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-04-15 07:20:00</td>\n      <td>10.00</td>\n      <td>10.23</td>\n      <td>10.00</td>\n      <td>10.23</td>\n      <td>3790.45</td>\n      <td>1INCHDOWN/USDT</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-04-15 07:25:00</td>\n      <td>10.25</td>\n      <td>10.25</td>\n      <td>10.12</td>\n      <td>10.14</td>\n      <td>2278.35</td>\n      <td>1INCHDOWN/USDT</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-04-15 07:30:00</td>\n      <td>10.12</td>\n      <td>10.25</td>\n      <td>10.05</td>\n      <td>10.24</td>\n      <td>759.88</td>\n      <td>1INCHDOWN/USDT</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-04-15 07:35:00</td>\n      <td>10.24</td>\n      <td>10.24</td>\n      <td>10.13</td>\n      <td>10.22</td>\n      <td>588.77</td>\n      <td>1INCHDOWN/USDT</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-04-15 07:40:00</td>\n      <td>10.22</td>\n      <td>10.25</td>\n      <td>10.20</td>\n      <td>10.25</td>\n      <td>158.92</td>\n      <td>1INCHDOWN/USDT</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1626934153228,
     "parent": "c.3.3",
     "raw": [
      {
       "execution_count": 19,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                 date   open   high    low  close   volume            pair  \\\n4 2021-04-15 07:40:00  10.22  10.25  10.20  10.25   158.92  1INCHDOWN/USDT   \n5 2021-04-15 07:45:00  10.25  10.25  10.07  10.17  1153.58  1INCHDOWN/USDT   \n6 2021-04-15 07:50:00  10.17  10.17  10.01  10.01   392.02  1INCHDOWN/USDT   \n7 2021-04-15 07:55:00  10.06  10.08   9.97  10.07   245.68  1INCHDOWN/USDT   \n8 2021-04-15 08:00:00  10.03  10.10  10.01  10.10    78.28  1INCHDOWN/USDT   \n\n     ma_5  \n4  10.216  \n5  10.204  \n6  10.178  \n7  10.144  \n8  10.120  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ma_5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>2021-04-15 07:40:00</td>\n      <td>10.22</td>\n      <td>10.25</td>\n      <td>10.20</td>\n      <td>10.25</td>\n      <td>158.92</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.216</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-04-15 07:45:00</td>\n      <td>10.25</td>\n      <td>10.25</td>\n      <td>10.07</td>\n      <td>10.17</td>\n      <td>1153.58</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.204</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2021-04-15 07:50:00</td>\n      <td>10.17</td>\n      <td>10.17</td>\n      <td>10.01</td>\n      <td>10.01</td>\n      <td>392.02</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.178</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2021-04-15 07:55:00</td>\n      <td>10.06</td>\n      <td>10.08</td>\n      <td>9.97</td>\n      <td>10.07</td>\n      <td>245.68</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.144</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2021-04-15 08:00:00</td>\n      <td>10.03</td>\n      <td>10.10</td>\n      <td>10.01</td>\n      <td>10.10</td>\n      <td>78.28</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.120</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.4",
   "versions": [
    {
     "start_checkpoint": 1626934219133,
     "parent": "c.3.5",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Length: 706798\n",
       "output_type": "stream"
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                 date   open   high    low  close   volume            pair  \\\n4 2021-04-15 07:40:00  10.22  10.25  10.20  10.25   158.92  1INCHDOWN/USDT   \n5 2021-04-15 07:45:00  10.25  10.25  10.07  10.17  1153.58  1INCHDOWN/USDT   \n6 2021-04-15 07:50:00  10.17  10.17  10.01  10.01   392.02  1INCHDOWN/USDT   \n7 2021-04-15 07:55:00  10.06  10.08   9.97  10.07   245.68  1INCHDOWN/USDT   \n8 2021-04-15 08:00:00  10.03  10.10  10.01  10.10    78.28  1INCHDOWN/USDT   \n\n     ma_5  \n4  10.216  \n5  10.204  \n6  10.178  \n7  10.144  \n8  10.120  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ma_5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>2021-04-15 07:40:00</td>\n      <td>10.22</td>\n      <td>10.25</td>\n      <td>10.20</td>\n      <td>10.25</td>\n      <td>158.92</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.216</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-04-15 07:45:00</td>\n      <td>10.25</td>\n      <td>10.25</td>\n      <td>10.07</td>\n      <td>10.17</td>\n      <td>1153.58</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.204</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2021-04-15 07:50:00</td>\n      <td>10.17</td>\n      <td>10.17</td>\n      <td>10.01</td>\n      <td>10.01</td>\n      <td>392.02</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.178</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2021-04-15 07:55:00</td>\n      <td>10.06</td>\n      <td>10.08</td>\n      <td>9.97</td>\n      <td>10.07</td>\n      <td>245.68</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.144</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2021-04-15 08:00:00</td>\n      <td>10.03</td>\n      <td>10.10</td>\n      <td>10.01</td>\n      <td>10.10</td>\n      <td>78.28</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.120</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.5",
   "versions": [
    {
     "start_checkpoint": 1626934228571,
     "parent": "c.3.6",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 706798\n",
       "output_type": "stream"
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                 date   open   high    low  close   volume            pair  \\\n4 2021-04-15 07:40:00  10.22  10.25  10.20  10.25   158.92  1INCHDOWN/USDT   \n5 2021-04-15 07:45:00  10.25  10.25  10.07  10.17  1153.58  1INCHDOWN/USDT   \n6 2021-04-15 07:50:00  10.17  10.17  10.01  10.01   392.02  1INCHDOWN/USDT   \n7 2021-04-15 07:55:00  10.06  10.08   9.97  10.07   245.68  1INCHDOWN/USDT   \n8 2021-04-15 08:00:00  10.03  10.10  10.01  10.10    78.28  1INCHDOWN/USDT   \n\n     ma_5  \n4  10.216  \n5  10.204  \n6  10.178  \n7  10.144  \n8  10.120  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ma_5</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>2021-04-15 07:40:00</td>\n      <td>10.22</td>\n      <td>10.25</td>\n      <td>10.20</td>\n      <td>10.25</td>\n      <td>158.92</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.216</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>2021-04-15 07:45:00</td>\n      <td>10.25</td>\n      <td>10.25</td>\n      <td>10.07</td>\n      <td>10.17</td>\n      <td>1153.58</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.204</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>2021-04-15 07:50:00</td>\n      <td>10.17</td>\n      <td>10.17</td>\n      <td>10.01</td>\n      <td>10.01</td>\n      <td>392.02</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.178</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>2021-04-15 07:55:00</td>\n      <td>10.06</td>\n      <td>10.08</td>\n      <td>9.97</td>\n      <td>10.07</td>\n      <td>245.68</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.144</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>2021-04-15 08:00:00</td>\n      <td>10.03</td>\n      <td>10.10</td>\n      <td>10.01</td>\n      <td>10.10</td>\n      <td>78.28</td>\n      <td>1INCHDOWN/USDT</td>\n      <td>10.120</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627287288862,
     "parent": "c.3.6",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 2698586\n",
       "output_type": "stream"
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                     date    open    high     low   close    volume  \\\n22359 2021-01-01 00:05:00  88.251  88.319  87.425  87.425   645.549   \n22360 2021-01-01 00:10:00  87.425  87.541  85.376  86.013  6838.644   \n22361 2021-01-01 00:15:00  86.016  86.612  85.888  86.537  1713.595   \n22362 2021-01-01 00:20:00  86.420  86.560  86.094  86.105   630.032   \n22363 2021-01-01 00:25:00  86.105  86.276  86.000  86.000   609.077   \n\n            pair  pct_change  \n22359  AAVE/USDT   -0.009360  \n22360  AAVE/USDT   -0.016151  \n22361  AAVE/USDT    0.006092  \n22362  AAVE/USDT   -0.004992  \n22363  AAVE/USDT   -0.001219  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>pct_change</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>22359</th>\n      <td>2021-01-01 00:05:00</td>\n      <td>88.251</td>\n      <td>88.319</td>\n      <td>87.425</td>\n      <td>87.425</td>\n      <td>645.549</td>\n      <td>AAVE/USDT</td>\n      <td>-0.009360</td>\n    </tr>\n    <tr>\n      <th>22360</th>\n      <td>2021-01-01 00:10:00</td>\n      <td>87.425</td>\n      <td>87.541</td>\n      <td>85.376</td>\n      <td>86.013</td>\n      <td>6838.644</td>\n      <td>AAVE/USDT</td>\n      <td>-0.016151</td>\n    </tr>\n    <tr>\n      <th>22361</th>\n      <td>2021-01-01 00:15:00</td>\n      <td>86.016</td>\n      <td>86.612</td>\n      <td>85.888</td>\n      <td>86.537</td>\n      <td>1713.595</td>\n      <td>AAVE/USDT</td>\n      <td>0.006092</td>\n    </tr>\n    <tr>\n      <th>22362</th>\n      <td>2021-01-01 00:20:00</td>\n      <td>86.420</td>\n      <td>86.560</td>\n      <td>86.094</td>\n      <td>86.105</td>\n      <td>630.032</td>\n      <td>AAVE/USDT</td>\n      <td>-0.004992</td>\n    </tr>\n    <tr>\n      <th>22363</th>\n      <td>2021-01-01 00:25:00</td>\n      <td>86.105</td>\n      <td>86.276</td>\n      <td>86.000</td>\n      <td>86.000</td>\n      <td>609.077</td>\n      <td>AAVE/USDT</td>\n      <td>-0.001219</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627287451043,
     "parent": "c.3.6",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1610504\n",
       "output_type": "stream"
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                     date     open     high      low    close    volume  \\\n39336 2021-03-01 00:05:00  354.657  354.659  350.972  353.609  1781.378   \n39337 2021-03-01 00:10:00  353.609  353.659  350.134  353.645  2926.436   \n39338 2021-03-01 00:15:00  353.194  360.000  353.194  359.994  2104.754   \n39339 2021-03-01 00:20:00  359.698  362.857  359.170  362.856  2564.374   \n39340 2021-03-01 00:25:00  362.768  364.235  360.953  361.405  2517.128   \n\n            pair  pct_change  \n39336  AAVE/USDT   -0.003806  \n39337  AAVE/USDT    0.000102  \n39338  AAVE/USDT    0.017953  \n39339  AAVE/USDT    0.007950  \n39340  AAVE/USDT   -0.003999  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>pct_change</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39336</th>\n      <td>2021-03-01 00:05:00</td>\n      <td>354.657</td>\n      <td>354.659</td>\n      <td>350.972</td>\n      <td>353.609</td>\n      <td>1781.378</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003806</td>\n    </tr>\n    <tr>\n      <th>39337</th>\n      <td>2021-03-01 00:10:00</td>\n      <td>353.609</td>\n      <td>353.659</td>\n      <td>350.134</td>\n      <td>353.645</td>\n      <td>2926.436</td>\n      <td>AAVE/USDT</td>\n      <td>0.000102</td>\n    </tr>\n    <tr>\n      <th>39338</th>\n      <td>2021-03-01 00:15:00</td>\n      <td>353.194</td>\n      <td>360.000</td>\n      <td>353.194</td>\n      <td>359.994</td>\n      <td>2104.754</td>\n      <td>AAVE/USDT</td>\n      <td>0.017953</td>\n    </tr>\n    <tr>\n      <th>39339</th>\n      <td>2021-03-01 00:20:00</td>\n      <td>359.698</td>\n      <td>362.857</td>\n      <td>359.170</td>\n      <td>362.856</td>\n      <td>2564.374</td>\n      <td>AAVE/USDT</td>\n      <td>0.007950</td>\n    </tr>\n    <tr>\n      <th>39340</th>\n      <td>2021-03-01 00:25:00</td>\n      <td>362.768</td>\n      <td>364.235</td>\n      <td>360.953</td>\n      <td>361.405</td>\n      <td>2517.128</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003999</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627287764737,
     "parent": "c.3.6",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1610504\n",
       "output_type": "stream"
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n39336 2021-03-01 00:05:00  354.657013  354.658997  350.971985  353.609009   \n39337 2021-03-01 00:10:00  353.609009  353.658997  350.134003  353.644989   \n39338 2021-03-01 00:15:00  353.194000  360.000000  353.194000  359.993988   \n39339 2021-03-01 00:20:00  359.697998  362.856995  359.170013  362.855988   \n39340 2021-03-01 00:25:00  362.768005  364.234985  360.953003  361.404999   \n\n            volume       pair  pct_change  \n39336  1781.378052  AAVE/USDT   -0.003806  \n39337  2926.436035  AAVE/USDT    0.000102  \n39338  2104.753906  AAVE/USDT    0.017953  \n39339  2564.374023  AAVE/USDT    0.007950  \n39340  2517.127930  AAVE/USDT   -0.003999  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>pct_change</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39336</th>\n      <td>2021-03-01 00:05:00</td>\n      <td>354.657013</td>\n      <td>354.658997</td>\n      <td>350.971985</td>\n      <td>353.609009</td>\n      <td>1781.378052</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003806</td>\n    </tr>\n    <tr>\n      <th>39337</th>\n      <td>2021-03-01 00:10:00</td>\n      <td>353.609009</td>\n      <td>353.658997</td>\n      <td>350.134003</td>\n      <td>353.644989</td>\n      <td>2926.436035</td>\n      <td>AAVE/USDT</td>\n      <td>0.000102</td>\n    </tr>\n    <tr>\n      <th>39338</th>\n      <td>2021-03-01 00:15:00</td>\n      <td>353.194000</td>\n      <td>360.000000</td>\n      <td>353.194000</td>\n      <td>359.993988</td>\n      <td>2104.753906</td>\n      <td>AAVE/USDT</td>\n      <td>0.017953</td>\n    </tr>\n    <tr>\n      <th>39339</th>\n      <td>2021-03-01 00:20:00</td>\n      <td>359.697998</td>\n      <td>362.856995</td>\n      <td>359.170013</td>\n      <td>362.855988</td>\n      <td>2564.374023</td>\n      <td>AAVE/USDT</td>\n      <td>0.007950</td>\n    </tr>\n    <tr>\n      <th>39340</th>\n      <td>2021-03-01 00:25:00</td>\n      <td>362.768005</td>\n      <td>364.234985</td>\n      <td>360.953003</td>\n      <td>361.404999</td>\n      <td>2517.127930</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003999</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.6",
   "versions": [
    {
     "start_checkpoint": 1627286442451,
     "parent": "c.6.0",
     "raw": [
      {
       "name": "stdout",
       "output_type": "stream",
       "text": "Loading: 1INCHDOWN_USDT-5m.json\nLoading: AAVEDOWN_USDT-5m.json\nLoading: ADADOWN_USDT-5m.json\nLoading: BCHDOWN_USDT-5m.json\nLoading: BNBDOWN_USDT-5m.json\nLoading: BTCDOWN_USDT-5m.json\nLoading: DOTDOWN_USDT-5m.json\nLoading: EOSDOWN_USDT-5m.json\nLoading: ETHDOWN_USDT-5m.json\nLoading: FILDOWN_USDT-5m.json\nLoading: LINKDOWN_USDT-5m.json\nLoading: LTCDOWN_USDT-5m.json\nLoading: SUSHIDOWN_USDT-5m.json\nLoading: SXPDOWN_USDT-5m.json\nLoading: TRXDOWN_USDT-5m.json\nLoading: UNIDOWN_USDT-5m.json\nLoading: XLMDOWN_USDT-5m.json\nLoading: XRPDOWN_USDT-5m.json\nLoading: XTZDOWN_USDT-5m.json\nLoading: YFIDOWN_USDT-5m.json\nFinished loading\n"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.7",
   "versions": [
    {
     "start_checkpoint": 1627286922484,
     "parent": "c.1.4",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.8",
   "versions": [
    {
     "start_checkpoint": 1627287083641,
     "parent": "c.2.7",
     "raw": [
      {
       "name": "stdout",
       "text": "Adding AAVE_USDT-15m.json\nAdding AAVE_USDT-5m.json\nAdding ADA_USDT-15m.json\nAdding ADA_USDT-5m.json\nAdding ALGO_USDT-15m.json\nAdding ALGO_USDT-5m.json\nAdding ANKR_USDT-15m.json\nAdding ANKR_USDT-5m.json\nAdding ATOM_USDT-15m.json\nAdding ATOM_USDT-5m.json\nAdding AVAX_USDT-15m.json\nAdding AVAX_USDT-5m.json\nAdding BAKE_USDT-15m.json\nAdding BAKE_USDT-5m.json\nAdding BAT_USDT-15m.json\nAdding BAT_USDT-5m.json\nAdding BCH_USDT-15m.json\nAdding BCH_USDT-5m.json\nAdding BNB_USDT-15m.json\nAdding BNB_USDT-5m.json\nAdding BNT_USDT-15m.json\nAdding BNT_USDT-5m.json\nAdding BTC_USDT-15m.json\nAdding BTC_USDT-5m.json\nAdding BTT_USDT-15m.json\nAdding BTT_USDT-5m.json\nAdding CAKE_USDT-15m.json\nAdding CAKE_USDT-5m.json\nAdding CELO_USDT-15m.json\nAdding CELO_USDT-5m.json\nAdding CHZ_USDT-15m.json\nAdding CHZ_USDT-5m.json\nAdding COMP_USDT-15m.json\nAdding COMP_USDT-5m.json\nAdding CRV_USDT-15m.json\nAdding CRV_USDT-5m.json\nAdding DASH_USDT-15m.json\nAdding DASH_USDT-5m.json\nAdding DCR_USDT-15m.json\nAdding DCR_USDT-5m.json\nAdding DOGE_USDT-15m.json\nAdding DOGE_USDT-5m.json\nAdding DOT_USDT-15m.json\nAdding DOT_USDT-5m.json\nAdding EGLD_USDT-15m.json\nAdding EGLD_USDT-5m.json\nAdding ENJ_USDT-15m.json\nAdding ENJ_USDT-5m.json\nAdding EOS_USDT-15m.json\nAdding EOS_USDT-5m.json\nAdding ETC_USDT-15m.json\nAdding ETC_USDT-5m.json\nAdding ETH_USDT-15m.json\nAdding ETH_USDT-5m.json\nAdding FIL_USDT-15m.json\nAdding FIL_USDT-5m.json\nAdding FTM_USDT-15m.json\nAdding FTM_USDT-5m.json\nAdding FTT_USDT-15m.json\nAdding FTT_USDT-5m.json\nAdding GRT_USDT-15m.json\nAdding GRT_USDT-5m.json\nAdding HNT_USDT-15m.json\nAdding HNT_USDT-5m.json\nAdding HOT_USDT-15m.json\nAdding HOT_USDT-5m.json\nAdding ICX_USDT-15m.json\nAdding ICX_USDT-5m.json\nAdding KSM_USDT-15m.json\nAdding KSM_USDT-5m.json\nAdding LINK_USDT-15m.json\nAdding LINK_USDT-5m.json\nAdding LTC_USDT-15m.json\nAdding LTC_USDT-5m.json\nAdding LUNA_USDT-15m.json\nAdding LUNA_USDT-5m.json\nAdding MANA_USDT-15m.json\nAdding MANA_USDT-5m.json\nAdding MATIC_USDT-15m.json\nAdding MATIC_USDT-5m.json\nAdding MKR_USDT-15m.json\nAdding MKR_USDT-5m.json\nAdding NANO_USDT-15m.json\nAdding NANO_USDT-5m.json\nAdding NEAR_USDT-15m.json\nAdding NEAR_USDT-5m.json\nAdding NEO_USDT-15m.json\nAdding NEO_USDT-5m.json\nAdding OMG_USDT-15m.json\nAdding OMG_USDT-5m.json\nAdding ONE_USDT-15m.json\nAdding ONE_USDT-5m.json\nAdding ONT_USDT-15m.json\nAdding ONT_USDT-5m.json\nAdding QTUM_USDT-15m.json\nAdding QTUM_USDT-5m.json\nAdding RVN_USDT-15m.json\nAdding RVN_USDT-5m.json\nAdding SNX_USDT-15m.json\nAdding SNX_USDT-5m.json\nAdding SOL_USDT-15m.json\nAdding SOL_USDT-5m.json\nAdding SUSHI_USDT-15m.json\nAdding SUSHI_USDT-5m.json\nAdding TFUEL_USDT-15m.json\nAdding TFUEL_USDT-5m.json\nAdding THETA_USDT-15m.json\nAdding THETA_USDT-5m.json\nAdding TRX_USDT-15m.json\nAdding TRX_USDT-5m.json\nAdding UNI_USDT-15m.json\nAdding UNI_USDT-5m.json\nAdding VET_USDT-15m.json\nAdding VET_USDT-5m.json\nAdding WAVES_USDT-15m.json\nAdding WAVES_USDT-5m.json\nAdding XEM_USDT-15m.json\nAdding XEM_USDT-5m.json\nAdding XLM_USDT-15m.json\nAdding XLM_USDT-5m.json\nAdding XMR_USDT-15m.json\nAdding XMR_USDT-5m.json\nAdding XRP_USDT-15m.json\nAdding XRP_USDT-5m.json\nAdding YFI_USDT-15m.json\nAdding YFI_USDT-5m.json\nAdding ZEC_USDT-15m.json\nAdding ZEC_USDT-5m.json\nAdding ZIL_USDT-15m.json\nAdding ZIL_USDT-5m.json\nAdding ZRX_USDT-15m.json\nAdding ZRX_USDT-5m.json\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.9",
   "versions": [
    {
     "start_checkpoint": 1627287111469,
     "parent": "c.2.8",
     "raw": [
      {
       "name": "stdout",
       "text": "Adding AAVE_USDT-5m.json\nAdding ADA_USDT-5m.json\nAdding ALGO_USDT-5m.json\nAdding ANKR_USDT-5m.json\nAdding ATOM_USDT-5m.json\nAdding AVAX_USDT-5m.json\nAdding BAKE_USDT-5m.json\nAdding BAT_USDT-5m.json\nAdding BCH_USDT-5m.json\nAdding BNB_USDT-5m.json\nAdding BNT_USDT-5m.json\nAdding BTC_USDT-5m.json\nAdding BTT_USDT-5m.json\nAdding CAKE_USDT-5m.json\nAdding CELO_USDT-5m.json\nAdding CHZ_USDT-5m.json\nAdding COMP_USDT-5m.json\nAdding CRV_USDT-5m.json\nAdding DASH_USDT-5m.json\nAdding DCR_USDT-5m.json\nAdding DOGE_USDT-5m.json\nAdding DOT_USDT-5m.json\nAdding EGLD_USDT-5m.json\nAdding ENJ_USDT-5m.json\nAdding EOS_USDT-5m.json\nAdding ETC_USDT-5m.json\nAdding ETH_USDT-5m.json\nAdding FIL_USDT-5m.json\nAdding FTM_USDT-5m.json\nAdding FTT_USDT-5m.json\nAdding GRT_USDT-5m.json\nAdding HNT_USDT-5m.json\nAdding HOT_USDT-5m.json\nAdding ICX_USDT-5m.json\nAdding KSM_USDT-5m.json\nAdding LINK_USDT-5m.json\nAdding LTC_USDT-5m.json\nAdding LUNA_USDT-5m.json\nAdding MANA_USDT-5m.json\nAdding MATIC_USDT-5m.json\nAdding MKR_USDT-5m.json\nAdding NANO_USDT-5m.json\nAdding NEAR_USDT-5m.json\nAdding NEO_USDT-5m.json\nAdding OMG_USDT-5m.json\nAdding ONE_USDT-5m.json\nAdding ONT_USDT-5m.json\nAdding QTUM_USDT-5m.json\nAdding RVN_USDT-5m.json\nAdding SNX_USDT-5m.json\nAdding SOL_USDT-5m.json\nAdding SUSHI_USDT-5m.json\nAdding TFUEL_USDT-5m.json\nAdding THETA_USDT-5m.json\nAdding TRX_USDT-5m.json\nAdding UNI_USDT-5m.json\nAdding VET_USDT-5m.json\nAdding WAVES_USDT-5m.json\nAdding XEM_USDT-5m.json\nAdding XLM_USDT-5m.json\nAdding XMR_USDT-5m.json\nAdding XRP_USDT-5m.json\nAdding YFI_USDT-5m.json\nAdding ZEC_USDT-5m.json\nAdding ZIL_USDT-5m.json\nAdding ZRX_USDT-5m.json\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.10",
   "versions": [
    {
     "start_checkpoint": 1627287148531,
     "parent": "c.2.9",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: [WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/AAVE_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ADA_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ALGO_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ANKR_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ATOM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/AVAX_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BAKE_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BAT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BCH_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BNB_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BNT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BTC_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/BTT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/CAKE_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/CELO_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/CHZ_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/COMP_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/CRV_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/DASH_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/DCR_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/DOGE_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/DOT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/EGLD_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ENJ_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/EOS_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ETC_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ETH_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/FIL_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/FTM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/FTT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/GRT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/HNT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/HOT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ICX_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/KSM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/LINK_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/LTC_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/LUNA_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/MANA_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/MATIC_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/MKR_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/NANO_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/NEAR_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/NEO_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/OMG_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ONE_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ONT_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/QTUM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/RVN_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/SNX_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/SOL_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/SUSHI_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/TFUEL_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/THETA_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/TRX_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/UNI_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/VET_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/WAVES_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/XEM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/XLM_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/XMR_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/XRP_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/YFI_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ZEC_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ZIL_USDT-5m.json'), WindowsPath('C:/CS/Python/crypto-collection/freqtrade/mount/data/binance/ZRX_USDT-5m.json')]\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.11",
   "versions": [
    {
     "start_checkpoint": 1627287160571,
     "parent": "c.2.10",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: ['AAVE_USDT-5m.json', 'ADA_USDT-5m.json', 'ALGO_USDT-5m.json', 'ANKR_USDT-5m.json', 'ATOM_USDT-5m.json', 'AVAX_USDT-5m.json', 'BAKE_USDT-5m.json', 'BAT_USDT-5m.json', 'BCH_USDT-5m.json', 'BNB_USDT-5m.json', 'BNT_USDT-5m.json', 'BTC_USDT-5m.json', 'BTT_USDT-5m.json', 'CAKE_USDT-5m.json', 'CELO_USDT-5m.json', 'CHZ_USDT-5m.json', 'COMP_USDT-5m.json', 'CRV_USDT-5m.json', 'DASH_USDT-5m.json', 'DCR_USDT-5m.json', 'DOGE_USDT-5m.json', 'DOT_USDT-5m.json', 'EGLD_USDT-5m.json', 'ENJ_USDT-5m.json', 'EOS_USDT-5m.json', 'ETC_USDT-5m.json', 'ETH_USDT-5m.json', 'FIL_USDT-5m.json', 'FTM_USDT-5m.json', 'FTT_USDT-5m.json', 'GRT_USDT-5m.json', 'HNT_USDT-5m.json', 'HOT_USDT-5m.json', 'ICX_USDT-5m.json', 'KSM_USDT-5m.json', 'LINK_USDT-5m.json', 'LTC_USDT-5m.json', 'LUNA_USDT-5m.json', 'MANA_USDT-5m.json', 'MATIC_USDT-5m.json', 'MKR_USDT-5m.json', 'NANO_USDT-5m.json', 'NEAR_USDT-5m.json', 'NEO_USDT-5m.json', 'OMG_USDT-5m.json', 'ONE_USDT-5m.json', 'ONT_USDT-5m.json', 'QTUM_USDT-5m.json', 'RVN_USDT-5m.json', 'SNX_USDT-5m.json', 'SOL_USDT-5m.json', 'SUSHI_USDT-5m.json', 'TFUEL_USDT-5m.json', 'THETA_USDT-5m.json', 'TRX_USDT-5m.json', 'UNI_USDT-5m.json', 'VET_USDT-5m.json', 'WAVES_USDT-5m.json', 'XEM_USDT-5m.json', 'XLM_USDT-5m.json', 'XMR_USDT-5m.json', 'XRP_USDT-5m.json', 'YFI_USDT-5m.json', 'ZEC_USDT-5m.json', 'ZIL_USDT-5m.json', 'ZRX_USDT-5m.json']\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.12",
   "versions": [
    {
     "start_checkpoint": 1627287288862,
     "parent": "c.6.1",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAKE_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CAKE_USDT-5m.json\nLoading: CELO_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: GRT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.13",
   "versions": [
    {
     "start_checkpoint": 1627287451043,
     "parent": "c.2.11",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: ['AAVE_USDT-5m.json', 'ADA_USDT-5m.json', 'ALGO_USDT-5m.json', 'ANKR_USDT-5m.json', 'ATOM_USDT-5m.json', 'AVAX_USDT-5m.json', 'BAKE_USDT-5m.json', 'BAT_USDT-5m.json', 'BCH_USDT-5m.json', 'BNB_USDT-5m.json', 'BNT_USDT-5m.json', 'BTC_USDT-5m.json', 'BTT_USDT-5m.json', 'CAKE_USDT-5m.json', 'CELO_USDT-5m.json', 'CHZ_USDT-5m.json', 'COMP_USDT-5m.json', 'CRV_USDT-5m.json', 'DASH_USDT-5m.json', 'DCR_USDT-5m.json', 'DOGE_USDT-5m.json', 'DOT_USDT-5m.json', 'EGLD_USDT-5m.json', 'ENJ_USDT-5m.json', 'EOS_USDT-5m.json', 'ETC_USDT-5m.json', 'ETH_USDT-5m.json', 'FIL_USDT-5m.json', 'FTM_USDT-5m.json', 'FTT_USDT-5m.json', 'GRT_USDT-5m.json', 'HNT_USDT-5m.json', 'HOT_USDT-5m.json', 'ICX_USDT-5m.json', 'KSM_USDT-5m.json', 'LINK_USDT-5m.json', 'LTC_USDT-5m.json', 'LUNA_USDT-5m.json', 'MANA_USDT-5m.json', 'MATIC_USDT-5m.json', 'MKR_USDT-5m.json', 'NANO_USDT-5m.json', 'NEAR_USDT-5m.json', 'NEO_USDT-5m.json', 'OMG_USDT-5m.json', 'ONE_USDT-5m.json', 'ONT_USDT-5m.json', 'QTUM_USDT-5m.json', 'RVN_USDT-5m.json', 'SNX_USDT-5m.json', 'SOL_USDT-5m.json', 'SUSHI_USDT-5m.json', 'TFUEL_USDT-5m.json', 'THETA_USDT-5m.json', 'TRX_USDT-5m.json', 'UNI_USDT-5m.json', 'VET_USDT-5m.json', 'WAVES_USDT-5m.json', 'XEM_USDT-5m.json', 'XLM_USDT-5m.json', 'XMR_USDT-5m.json', 'XRP_USDT-5m.json', 'YFI_USDT-5m.json', 'ZEC_USDT-5m.json', 'ZIL_USDT-5m.json', 'ZRX_USDT-5m.json']\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.14",
   "versions": [
    {
     "start_checkpoint": 1627287451043,
     "parent": "c.4.1",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float64       \n 2   high        1610504 non-null  float64       \n 3   low         1610504 non-null  float64       \n 4   close       1610504 non-null  float64       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float64       \ndtypes: datetime64[ns](1), float64(6), object(1)\nmemory usage: 110.6+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.15",
   "versions": [
    {
     "start_checkpoint": 1627287668739,
     "parent": "c.4.3",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float64       \n 2   high        1610504 non-null  float64       \n 3   low         1610504 non-null  float64       \n 4   close       1610504 non-null  float64       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float64       \ndtypes: datetime64[ns](1), float64(6), object(1)\nmemory usage: 110.6+ MB\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float64       \n 2   high        1610504 non-null  float64       \n 3   low         1610504 non-null  float64       \n 4   close       1610504 non-null  float64       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float64       \ndtypes: datetime64[ns](1), float64(6), object(1)\nmemory usage: 110.6+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.16",
   "versions": [
    {
     "start_checkpoint": 1627287704741,
     "parent": "c.4.4",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float64       \n 2   high        1610504 non-null  float64       \n 3   low         1610504 non-null  float64       \n 4   close       1610504 non-null  float64       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float64       \ndtypes: datetime64[ns](1), float64(6), object(1)\nmemory usage: 110.6+ MB\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float16       \n 2   high        1610504 non-null  float16       \n 3   low         1610504 non-null  float16       \n 4   close       1610504 non-null  float16       \n 5   volume      1610504 non-null  float16       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float16       \ndtypes: datetime64[ns](1), float16(6), object(1)\nmemory usage: 55.3+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.17",
   "versions": [
    {
     "start_checkpoint": 1627287819910,
     "parent": "c.4.5",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float32       \n 2   high        1610504 non-null  float32       \n 3   low         1610504 non-null  float32       \n 4   close       1610504 non-null  float32       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float32       \ndtypes: datetime64[ns](1), float32(5), float64(1), object(1)\nmemory usage: 79.9+ MB\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627287915060,
     "parent": "c.4.5",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float64       \n 2   high        1610504 non-null  float64       \n 3   low         1610504 non-null  float64       \n 4   close       1610504 non-null  float64       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float64       \ndtypes: datetime64[ns](1), float64(6), object(1)\nmemory usage: 110.6+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.18",
   "versions": [
    {
     "start_checkpoint": 1627287915060,
     "parent": "c.3.7",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1610504\n",
       "output_type": "stream"
      },
      {
       "execution_count": 20,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date     open     high      low    close    volume  \\\n39336 2021-03-01 00:05:00  354.657  354.659  350.972  353.609  1781.378   \n39337 2021-03-01 00:10:00  353.609  353.659  350.134  353.645  2926.436   \n39338 2021-03-01 00:15:00  353.194  360.000  353.194  359.994  2104.754   \n39339 2021-03-01 00:20:00  359.698  362.857  359.170  362.856  2564.374   \n39340 2021-03-01 00:25:00  362.768  364.235  360.953  361.405  2517.128   \n\n            pair  pct_change  \n39336  AAVE/USDT   -0.003806  \n39337  AAVE/USDT    0.000102  \n39338  AAVE/USDT    0.017953  \n39339  AAVE/USDT    0.007950  \n39340  AAVE/USDT   -0.003999  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>pct_change</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39336</th>\n      <td>2021-03-01 00:05:00</td>\n      <td>354.657</td>\n      <td>354.659</td>\n      <td>350.972</td>\n      <td>353.609</td>\n      <td>1781.378</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003806</td>\n    </tr>\n    <tr>\n      <th>39337</th>\n      <td>2021-03-01 00:10:00</td>\n      <td>353.609</td>\n      <td>353.659</td>\n      <td>350.134</td>\n      <td>353.645</td>\n      <td>2926.436</td>\n      <td>AAVE/USDT</td>\n      <td>0.000102</td>\n    </tr>\n    <tr>\n      <th>39338</th>\n      <td>2021-03-01 00:15:00</td>\n      <td>353.194</td>\n      <td>360.000</td>\n      <td>353.194</td>\n      <td>359.994</td>\n      <td>2104.754</td>\n      <td>AAVE/USDT</td>\n      <td>0.017953</td>\n    </tr>\n    <tr>\n      <th>39339</th>\n      <td>2021-03-01 00:20:00</td>\n      <td>359.698</td>\n      <td>362.857</td>\n      <td>359.170</td>\n      <td>362.856</td>\n      <td>2564.374</td>\n      <td>AAVE/USDT</td>\n      <td>0.007950</td>\n    </tr>\n    <tr>\n      <th>39340</th>\n      <td>2021-03-01 00:25:00</td>\n      <td>362.768</td>\n      <td>364.235</td>\n      <td>360.953</td>\n      <td>361.405</td>\n      <td>2517.128</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003999</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627288123291,
     "parent": "c.3.7",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1610504\n",
       "output_type": "stream"
      },
      {
       "execution_count": 25,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n39336 2021-03-01 00:05:00  354.657013  354.658997  350.971985  353.609009   \n39337 2021-03-01 00:10:00  353.609009  353.658997  350.134003  353.644989   \n39338 2021-03-01 00:15:00  353.194000  360.000000  353.194000  359.993988   \n39339 2021-03-01 00:20:00  359.697998  362.856995  359.170013  362.855988   \n39340 2021-03-01 00:25:00  362.768005  364.234985  360.953003  361.404999   \n\n            volume       pair  pct_change  \n39336  1781.378052  AAVE/USDT   -0.003806  \n39337  2926.436035  AAVE/USDT    0.000102  \n39338  2104.753906  AAVE/USDT    0.017953  \n39339  2564.374023  AAVE/USDT    0.007950  \n39340  2517.127930  AAVE/USDT   -0.003999  ",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>pct_change</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>39336</th>\n      <td>2021-03-01 00:05:00</td>\n      <td>354.657013</td>\n      <td>354.658997</td>\n      <td>350.971985</td>\n      <td>353.609009</td>\n      <td>1781.378052</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003806</td>\n    </tr>\n    <tr>\n      <th>39337</th>\n      <td>2021-03-01 00:10:00</td>\n      <td>353.609009</td>\n      <td>353.658997</td>\n      <td>350.134003</td>\n      <td>353.644989</td>\n      <td>2926.436035</td>\n      <td>AAVE/USDT</td>\n      <td>0.000102</td>\n    </tr>\n    <tr>\n      <th>39338</th>\n      <td>2021-03-01 00:15:00</td>\n      <td>353.194000</td>\n      <td>360.000000</td>\n      <td>353.194000</td>\n      <td>359.993988</td>\n      <td>2104.753906</td>\n      <td>AAVE/USDT</td>\n      <td>0.017953</td>\n    </tr>\n    <tr>\n      <th>39339</th>\n      <td>2021-03-01 00:20:00</td>\n      <td>359.697998</td>\n      <td>362.856995</td>\n      <td>359.170013</td>\n      <td>362.855988</td>\n      <td>2564.374023</td>\n      <td>AAVE/USDT</td>\n      <td>0.007950</td>\n    </tr>\n    <tr>\n      <th>39340</th>\n      <td>2021-03-01 00:25:00</td>\n      <td>362.768005</td>\n      <td>364.234985</td>\n      <td>360.953003</td>\n      <td>361.404999</td>\n      <td>2517.127930</td>\n      <td>AAVE/USDT</td>\n      <td>-0.003999</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627291522537,
     "parent": "c.3.7",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1544363\n",
       "output_type": "stream"
      },
      {
       "execution_count": 13,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n40334 2021-03-04 11:15:00  387.695007  387.764008  386.005005  387.171997   \n40335 2021-03-04 11:20:00  387.171997  387.500000  384.384003  385.778015   \n40336 2021-03-04 11:25:00  385.243988  385.500000  382.510010  383.493988   \n40337 2021-03-04 11:30:00  383.701996  386.937012  383.368011  386.335999   \n40338 2021-03-04 11:35:00  386.813995  388.123993  385.819000  387.714996   \n\n            volume       pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  \\\n40334   249.141998  AAVE/USDT      0.542338      0.835999      0.000000  ...   \n40335   377.921997  AAVE/USDT      1.207987      2.229980      0.000000  ...   \n40336  1298.712036  AAVE/USDT      1.987345      3.678009      0.000000  ...   \n40337   317.311005  AAVE/USDT     -1.133331      0.000000     -2.842010  ...   \n40338   558.260010  AAVE/USDT     -1.866669      0.000000     -4.221008  ...   \n\n       ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\n40334       29.884003       -9.412994    8.598591   0.045450   50.334190   \n40335       31.277985       -8.019012    8.610847   0.045215   50.245678   \n40336       33.562012       -5.734985    8.631269   0.044950   50.101040   \n40337       30.720001       -8.576996    8.646262   0.044659   50.279491   \n40338       29.341003       -9.955994    8.656794   0.044433   50.365791   \n\n         ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  \\\n40334 -0.297333             1.347208        1.311475   0.001402   \n40335 -0.447363             0.516894        1.429759   0.002641   \n40336 -0.585286             2.436455        1.632589   0.007288   \n40337  0.738023            -0.755673        1.665520  -0.000489   \n40338  0.390891             0.759346        1.675234  -0.004418   \n\n       ml_target_real  \n40334        0.001402  \n40335        0.002641  \n40336        0.007288  \n40337       -0.000489  \n40338       -0.004418  \n\n[5 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40334</th>\n      <td>2021-03-04 11:15:00</td>\n      <td>387.695007</td>\n      <td>387.764008</td>\n      <td>386.005005</td>\n      <td>387.171997</td>\n      <td>249.141998</td>\n      <td>AAVE/USDT</td>\n      <td>0.542338</td>\n      <td>0.835999</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>29.884003</td>\n      <td>-9.412994</td>\n      <td>8.598591</td>\n      <td>0.045450</td>\n      <td>50.334190</td>\n      <td>-0.297333</td>\n      <td>1.347208</td>\n      <td>1.311475</td>\n      <td>0.001402</td>\n      <td>0.001402</td>\n    </tr>\n    <tr>\n      <th>40335</th>\n      <td>2021-03-04 11:20:00</td>\n      <td>387.171997</td>\n      <td>387.500000</td>\n      <td>384.384003</td>\n      <td>385.778015</td>\n      <td>377.921997</td>\n      <td>AAVE/USDT</td>\n      <td>1.207987</td>\n      <td>2.229980</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>31.277985</td>\n      <td>-8.019012</td>\n      <td>8.610847</td>\n      <td>0.045215</td>\n      <td>50.245678</td>\n      <td>-0.447363</td>\n      <td>0.516894</td>\n      <td>1.429759</td>\n      <td>0.002641</td>\n      <td>0.002641</td>\n    </tr>\n    <tr>\n      <th>40336</th>\n      <td>2021-03-04 11:25:00</td>\n      <td>385.243988</td>\n      <td>385.500000</td>\n      <td>382.510010</td>\n      <td>383.493988</td>\n      <td>1298.712036</td>\n      <td>AAVE/USDT</td>\n      <td>1.987345</td>\n      <td>3.678009</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>33.562012</td>\n      <td>-5.734985</td>\n      <td>8.631269</td>\n      <td>0.044950</td>\n      <td>50.101040</td>\n      <td>-0.585286</td>\n      <td>2.436455</td>\n      <td>1.632589</td>\n      <td>0.007288</td>\n      <td>0.007288</td>\n    </tr>\n    <tr>\n      <th>40337</th>\n      <td>2021-03-04 11:30:00</td>\n      <td>383.701996</td>\n      <td>386.937012</td>\n      <td>383.368011</td>\n      <td>386.335999</td>\n      <td>317.311005</td>\n      <td>AAVE/USDT</td>\n      <td>-1.133331</td>\n      <td>0.000000</td>\n      <td>-2.842010</td>\n      <td>...</td>\n      <td>30.720001</td>\n      <td>-8.576996</td>\n      <td>8.646262</td>\n      <td>0.044659</td>\n      <td>50.279491</td>\n      <td>0.738023</td>\n      <td>-0.755673</td>\n      <td>1.665520</td>\n      <td>-0.000489</td>\n      <td>-0.000489</td>\n    </tr>\n    <tr>\n      <th>40338</th>\n      <td>2021-03-04 11:35:00</td>\n      <td>386.813995</td>\n      <td>388.123993</td>\n      <td>385.819000</td>\n      <td>387.714996</td>\n      <td>558.260010</td>\n      <td>AAVE/USDT</td>\n      <td>-1.866669</td>\n      <td>0.000000</td>\n      <td>-4.221008</td>\n      <td>...</td>\n      <td>29.341003</td>\n      <td>-9.955994</td>\n      <td>8.656794</td>\n      <td>0.044433</td>\n      <td>50.365791</td>\n      <td>0.390891</td>\n      <td>0.759346</td>\n      <td>1.675234</td>\n      <td>-0.004418</td>\n      <td>-0.004418</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627292141436,
     "parent": "c.3.7",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1467035\n",
       "output_type": "stream"
      },
      {
       "execution_count": 5,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n40334 2021-03-04 11:15:00  387.695007  387.764008  386.005005  387.171997   \n40335 2021-03-04 11:20:00  387.171997  387.500000  384.384003  385.778015   \n40336 2021-03-04 11:25:00  385.243988  385.500000  382.510010  383.493988   \n40337 2021-03-04 11:30:00  383.701996  386.937012  383.368011  386.335999   \n40338 2021-03-04 11:35:00  386.813995  388.123993  385.819000  387.714996   \n\n            volume       pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  \\\n40334   249.141998  AAVE/USDT      0.542338      0.835999      0.000000  ...   \n40335   377.921997  AAVE/USDT      1.207987      2.229980      0.000000  ...   \n40336  1298.712036  AAVE/USDT      1.987345      3.678009      0.000000  ...   \n40337   317.311005  AAVE/USDT     -1.133331      0.000000     -2.842010  ...   \n40338   558.260010  AAVE/USDT     -1.866669      0.000000     -4.221008  ...   \n\n       ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\n40334       29.884003       -9.412994    8.598591   0.045450   50.334190   \n40335       31.277985       -8.019012    8.610847   0.045215   50.245678   \n40336       33.562012       -5.734985    8.631269   0.044950   50.101040   \n40337       30.720001       -8.576996    8.646262   0.044659   50.279491   \n40338       29.341003       -9.955994    8.656794   0.044433   50.365791   \n\n         ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  \\\n40334 -0.297333             1.347208        1.311475   0.001402   \n40335 -0.447363             0.516894        1.429759   0.002641   \n40336 -0.585286             2.436455        1.632589   0.007288   \n40337  0.738023            -0.755673        1.665520  -0.000489   \n40338  0.390891             0.759346        1.675234  -0.004418   \n\n       ml_target_real  \n40334        0.001402  \n40335        0.002641  \n40336        0.007288  \n40337       -0.000489  \n40338       -0.004418  \n\n[5 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40334</th>\n      <td>2021-03-04 11:15:00</td>\n      <td>387.695007</td>\n      <td>387.764008</td>\n      <td>386.005005</td>\n      <td>387.171997</td>\n      <td>249.141998</td>\n      <td>AAVE/USDT</td>\n      <td>0.542338</td>\n      <td>0.835999</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>29.884003</td>\n      <td>-9.412994</td>\n      <td>8.598591</td>\n      <td>0.045450</td>\n      <td>50.334190</td>\n      <td>-0.297333</td>\n      <td>1.347208</td>\n      <td>1.311475</td>\n      <td>0.001402</td>\n      <td>0.001402</td>\n    </tr>\n    <tr>\n      <th>40335</th>\n      <td>2021-03-04 11:20:00</td>\n      <td>387.171997</td>\n      <td>387.500000</td>\n      <td>384.384003</td>\n      <td>385.778015</td>\n      <td>377.921997</td>\n      <td>AAVE/USDT</td>\n      <td>1.207987</td>\n      <td>2.229980</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>31.277985</td>\n      <td>-8.019012</td>\n      <td>8.610847</td>\n      <td>0.045215</td>\n      <td>50.245678</td>\n      <td>-0.447363</td>\n      <td>0.516894</td>\n      <td>1.429759</td>\n      <td>0.002641</td>\n      <td>0.002641</td>\n    </tr>\n    <tr>\n      <th>40336</th>\n      <td>2021-03-04 11:25:00</td>\n      <td>385.243988</td>\n      <td>385.500000</td>\n      <td>382.510010</td>\n      <td>383.493988</td>\n      <td>1298.712036</td>\n      <td>AAVE/USDT</td>\n      <td>1.987345</td>\n      <td>3.678009</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>33.562012</td>\n      <td>-5.734985</td>\n      <td>8.631269</td>\n      <td>0.044950</td>\n      <td>50.101040</td>\n      <td>-0.585286</td>\n      <td>2.436455</td>\n      <td>1.632589</td>\n      <td>0.007288</td>\n      <td>0.007288</td>\n    </tr>\n    <tr>\n      <th>40337</th>\n      <td>2021-03-04 11:30:00</td>\n      <td>383.701996</td>\n      <td>386.937012</td>\n      <td>383.368011</td>\n      <td>386.335999</td>\n      <td>317.311005</td>\n      <td>AAVE/USDT</td>\n      <td>-1.133331</td>\n      <td>0.000000</td>\n      <td>-2.842010</td>\n      <td>...</td>\n      <td>30.720001</td>\n      <td>-8.576996</td>\n      <td>8.646262</td>\n      <td>0.044659</td>\n      <td>50.279491</td>\n      <td>0.738023</td>\n      <td>-0.755673</td>\n      <td>1.665520</td>\n      <td>-0.000489</td>\n      <td>-0.000489</td>\n    </tr>\n    <tr>\n      <th>40338</th>\n      <td>2021-03-04 11:35:00</td>\n      <td>386.813995</td>\n      <td>388.123993</td>\n      <td>385.819000</td>\n      <td>387.714996</td>\n      <td>558.260010</td>\n      <td>AAVE/USDT</td>\n      <td>-1.866669</td>\n      <td>0.000000</td>\n      <td>-4.221008</td>\n      <td>...</td>\n      <td>29.341003</td>\n      <td>-9.955994</td>\n      <td>8.656794</td>\n      <td>0.044433</td>\n      <td>50.365791</td>\n      <td>0.390891</td>\n      <td>0.759346</td>\n      <td>1.675234</td>\n      <td>-0.004418</td>\n      <td>-0.004418</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.19",
   "versions": [
    {
     "start_checkpoint": 1627287949807,
     "parent": "c.4.6",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float32       \n 2   high        1610504 non-null  float32       \n 3   low         1610504 non-null  float32       \n 4   close       1610504 non-null  float32       \n 5   volume      1610504 non-null  float32       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float32       \ndtypes: datetime64[ns](1), float32(6), object(1)\nmemory usage: 73.7+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.20",
   "versions": [
    {
     "start_checkpoint": 1627288168472,
     "parent": "c.4.8",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float32       \n 2   high        1610504 non-null  float32       \n 3   low         1610504 non-null  float32       \n 4   close       1610504 non-null  float32       \n 5   volume      1610504 non-null  float64       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float32       \ndtypes: datetime64[ns](1), float32(5), float64(1), object(1)\nmemory usage: 79.9+ MB\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627289032240,
     "parent": "c.4.8",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1610504 entries, 39336 to 234816\nData columns (total 8 columns):\n #   Column      Non-Null Count    Dtype         \n---  ------      --------------    -----         \n 0   date        1610504 non-null  datetime64[ns]\n 1   open        1610504 non-null  float32       \n 2   high        1610504 non-null  float32       \n 3   low         1610504 non-null  float32       \n 4   close       1610504 non-null  float32       \n 5   volume      1610504 non-null  float32       \n 6   pair        1610504 non-null  object        \n 7   pct_change  1610504 non-null  float32       \ndtypes: datetime64[ns](1), float32(6), object(1)\nmemory usage: 73.7+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.21",
   "versions": [
    {
     "start_checkpoint": 1627288628925,
     "parent": "c.2.13",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: ['AAVE_USDT-5m.json', 'ADA_USDT-5m.json', 'ALGO_USDT-5m.json', 'ANKR_USDT-5m.json', 'ATOM_USDT-5m.json', 'AVAX_USDT-5m.json', 'BAKE_USDT-5m.json', 'BAT_USDT-5m.json', 'BCH_USDT-5m.json', 'BNB_USDT-5m.json', 'BNT_USDT-5m.json', 'BTC_USDT-5m.json', 'BTT_USDT-5m.json', 'CAKE_USDT-5m.json', 'CELO_USDT-5m.json', 'CHZ_USDT-5m.json', 'COMP_USDT-5m.json', 'CRV_USDT-5m.json', 'DASH_USDT-5m.json', 'DCR_USDT-5m.json', 'DOGE_USDT-5m.json', 'DOT_USDT-5m.json', 'EGLD_USDT-5m.json', 'ENJ_USDT-5m.json', 'EOS_USDT-5m.json', 'ETC_USDT-5m.json', 'ETH_USDT-5m.json', 'FIL_USDT-5m.json', 'FTM_USDT-5m.json', 'FTT_USDT-5m.json', 'GRT_USDT-5m.json', 'HNT_USDT-5m.json', 'HOT_USDT-5m.json', 'ICX_USDT-5m.json', 'KSM_USDT-5m.json', 'LINK_USDT-5m.json', 'LTC_USDT-5m.json', 'LUNA_USDT-5m.json', 'MANA_USDT-5m.json', 'MATIC_USDT-5m.json', 'MKR_USDT-5m.json', 'NANO_USDT-5m.json', 'NEAR_USDT-5m.json', 'NEO_USDT-5m.json', 'OMG_USDT-5m.json', 'ONE_USDT-5m.json', 'ONT_USDT-5m.json', 'QTUM_USDT-5m.json', 'RVN_USDT-5m.json', 'SNX_USDT-5m.json', 'SOL_USDT-5m.json', 'SUSHI_USDT-5m.json', 'TFUEL_USDT-5m.json', 'THETA_USDT-5m.json', 'TRX_USDT-5m.json', 'UNI_USDT-5m.json', 'VET_USDT-5m.json', 'WAVES_USDT-5m.json', 'XEM_USDT-5m.json', 'XLM_USDT-5m.json', 'XMR_USDT-5m.json', 'XRP_USDT-5m.json', 'YFI_USDT-5m.json', 'ZEC_USDT-5m.json', 'ZIL_USDT-5m.json', 'ZRX_USDT-5m.json']\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.22",
   "versions": [
    {
     "start_checkpoint": 1627290708020,
     "parent": "c.1.6",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627291188967,
     "parent": "c.1.6",
     "raw": []
    }
   ]
  },
  {
   "artifact_name": "o.23",
   "versions": [
    {
     "start_checkpoint": 1627291188967,
     "parent": "c.2.14",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: ['AAVE_USDT-5m.json', 'ADA_USDT-5m.json', 'ALGO_USDT-5m.json', 'ANKR_USDT-5m.json', 'ATOM_USDT-5m.json', 'AVAX_USDT-5m.json', 'BAKE_USDT-5m.json', 'BAT_USDT-5m.json', 'BCH_USDT-5m.json', 'BNB_USDT-5m.json', 'BNT_USDT-5m.json', 'BTC_USDT-5m.json', 'BTT_USDT-5m.json', 'CAKE_USDT-5m.json', 'CELO_USDT-5m.json', 'CHZ_USDT-5m.json', 'COMP_USDT-5m.json', 'CRV_USDT-5m.json', 'DASH_USDT-5m.json', 'DCR_USDT-5m.json', 'DOGE_USDT-5m.json', 'DOT_USDT-5m.json', 'EGLD_USDT-5m.json', 'ENJ_USDT-5m.json', 'EOS_USDT-5m.json', 'ETC_USDT-5m.json', 'ETH_USDT-5m.json', 'FIL_USDT-5m.json', 'FTM_USDT-5m.json', 'FTT_USDT-5m.json', 'GRT_USDT-5m.json', 'HNT_USDT-5m.json', 'HOT_USDT-5m.json', 'ICX_USDT-5m.json', 'KSM_USDT-5m.json', 'LINK_USDT-5m.json', 'LTC_USDT-5m.json', 'LUNA_USDT-5m.json', 'MANA_USDT-5m.json', 'MATIC_USDT-5m.json', 'MKR_USDT-5m.json', 'NANO_USDT-5m.json', 'NEAR_USDT-5m.json', 'NEO_USDT-5m.json', 'OMG_USDT-5m.json', 'ONE_USDT-5m.json', 'ONT_USDT-5m.json', 'QTUM_USDT-5m.json', 'RVN_USDT-5m.json', 'SNX_USDT-5m.json', 'SOL_USDT-5m.json', 'SUSHI_USDT-5m.json', 'TFUEL_USDT-5m.json', 'THETA_USDT-5m.json', 'TRX_USDT-5m.json', 'UNI_USDT-5m.json', 'VET_USDT-5m.json', 'WAVES_USDT-5m.json', 'XEM_USDT-5m.json', 'XLM_USDT-5m.json', 'XMR_USDT-5m.json', 'XRP_USDT-5m.json', 'YFI_USDT-5m.json', 'ZEC_USDT-5m.json', 'ZIL_USDT-5m.json', 'ZRX_USDT-5m.json']\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627292068433,
     "parent": "c.2.14",
     "raw": [
      {
       "name": "stdout",
       "text": "Pairs: ['AAVE_USDT-5m.json', 'ADA_USDT-5m.json', 'ALGO_USDT-5m.json', 'ANKR_USDT-5m.json', 'ATOM_USDT-5m.json', 'AVAX_USDT-5m.json', 'BAT_USDT-5m.json', 'BCH_USDT-5m.json', 'BNB_USDT-5m.json', 'BNT_USDT-5m.json', 'BTC_USDT-5m.json', 'BTT_USDT-5m.json', 'CHZ_USDT-5m.json', 'COMP_USDT-5m.json', 'CRV_USDT-5m.json', 'DASH_USDT-5m.json', 'DCR_USDT-5m.json', 'DOGE_USDT-5m.json', 'DOT_USDT-5m.json', 'EGLD_USDT-5m.json', 'ENJ_USDT-5m.json', 'EOS_USDT-5m.json', 'ETC_USDT-5m.json', 'ETH_USDT-5m.json', 'FIL_USDT-5m.json', 'FTM_USDT-5m.json', 'FTT_USDT-5m.json', 'HNT_USDT-5m.json', 'HOT_USDT-5m.json', 'ICX_USDT-5m.json', 'KSM_USDT-5m.json', 'LINK_USDT-5m.json', 'LTC_USDT-5m.json', 'LUNA_USDT-5m.json', 'MANA_USDT-5m.json', 'MATIC_USDT-5m.json', 'MKR_USDT-5m.json', 'NANO_USDT-5m.json', 'NEAR_USDT-5m.json', 'NEO_USDT-5m.json', 'OMG_USDT-5m.json', 'ONE_USDT-5m.json', 'ONT_USDT-5m.json', 'QTUM_USDT-5m.json', 'RVN_USDT-5m.json', 'SNX_USDT-5m.json', 'SOL_USDT-5m.json', 'SUSHI_USDT-5m.json', 'TFUEL_USDT-5m.json', 'THETA_USDT-5m.json', 'TRX_USDT-5m.json', 'UNI_USDT-5m.json', 'VET_USDT-5m.json', 'WAVES_USDT-5m.json', 'XEM_USDT-5m.json', 'XLM_USDT-5m.json', 'XMR_USDT-5m.json', 'XRP_USDT-5m.json', 'YFI_USDT-5m.json', 'ZEC_USDT-5m.json', 'ZIL_USDT-5m.json', 'ZRX_USDT-5m.json']\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.24",
   "versions": [
    {
     "start_checkpoint": 1627291522537,
     "parent": "c.6.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAKE_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CAKE_USDT-5m.json\nLoading: CELO_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: GRT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627292068433,
     "parent": "c.6.2",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.25",
   "versions": [
    {
     "start_checkpoint": 1627291522537,
     "parent": "c.4.9",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1544363 entries, 40334 to 234812\nData columns (total 66 columns):\n #   Column               Non-Null Count    Dtype         \n---  ------               --------------    -----         \n 0   date                 1544363 non-null  datetime64[ns]\n 1   open                 1544363 non-null  float32       \n 2   high                 1544363 non-null  float32       \n 3   low                  1544363 non-null  float32       \n 4   close                1544363 non-null  float32       \n 5   volume               1544363 non-null  float32       \n 6   pair                 1544363 non-null  object        \n 7   ml_smadiff_3         1544363 non-null  float32       \n 8   ml_maxdiff_3         1544363 non-null  float32       \n 9   ml_mindiff_3         1544363 non-null  float32       \n 10  ml_std_3             1544363 non-null  float32       \n 11  ml_ma_3              1544363 non-null  float32       \n 12  ml_rsi_3             1544363 non-null  float32       \n 13  ml_smadiff_5         1544363 non-null  float32       \n 14  ml_maxdiff_5         1544363 non-null  float32       \n 15  ml_mindiff_5         1544363 non-null  float32       \n 16  ml_std_5             1544363 non-null  float32       \n 17  ml_ma_5              1544363 non-null  float32       \n 18  ml_rsi_5             1544363 non-null  float32       \n 19  ml_smadiff_9         1544363 non-null  float32       \n 20  ml_maxdiff_9         1544363 non-null  float32       \n 21  ml_mindiff_9         1544363 non-null  float32       \n 22  ml_std_9             1544363 non-null  float32       \n 23  ml_ma_9              1544363 non-null  float32       \n 24  ml_rsi_9             1544363 non-null  float32       \n 25  ml_smadiff_15        1544363 non-null  float32       \n 26  ml_maxdiff_15        1544363 non-null  float32       \n 27  ml_mindiff_15        1544363 non-null  float32       \n 28  ml_std_15            1544363 non-null  float32       \n 29  ml_ma_15             1544363 non-null  float32       \n 30  ml_rsi_15            1544363 non-null  float32       \n 31  ml_smadiff_25        1544363 non-null  float32       \n 32  ml_maxdiff_25        1544363 non-null  float32       \n 33  ml_mindiff_25        1544363 non-null  float32       \n 34  ml_std_25            1544363 non-null  float32       \n 35  ml_ma_25             1544363 non-null  float32       \n 36  ml_rsi_25            1544363 non-null  float32       \n 37  ml_smadiff_50        1544363 non-null  float32       \n 38  ml_maxdiff_50        1544363 non-null  float32       \n 39  ml_mindiff_50        1544363 non-null  float32       \n 40  ml_std_50            1544363 non-null  float32       \n 41  ml_ma_50             1544363 non-null  float32       \n 42  ml_rsi_50            1544363 non-null  float32       \n 43  ml_smadiff_100       1544363 non-null  float32       \n 44  ml_maxdiff_100       1544363 non-null  float32       \n 45  ml_mindiff_100       1544363 non-null  float32       \n 46  ml_std_100           1544363 non-null  float32       \n 47  ml_ma_100            1544363 non-null  float32       \n 48  ml_rsi_100           1544363 non-null  float32       \n 49  ml_smadiff_200       1544363 non-null  float32       \n 50  ml_maxdiff_200       1544363 non-null  float32       \n 51  ml_mindiff_200       1544363 non-null  float32       \n 52  ml_std_200           1544363 non-null  float32       \n 53  ml_ma_200            1544363 non-null  float32       \n 54  ml_rsi_200           1544363 non-null  float32       \n 55  ml_smadiff_500       1544363 non-null  float32       \n 56  ml_maxdiff_500       1544363 non-null  float32       \n 57  ml_mindiff_500       1544363 non-null  float32       \n 58  ml_std_500           1544363 non-null  float32       \n 59  ml_ma_500            1544363 non-null  float32       \n 60  ml_rsi_500           1544363 non-null  float32       \n 61  ml_bop               1544363 non-null  float32       \n 62  ml_volume_pctchange  1544363 non-null  float32       \n 63  ml_z_score_120       1544363 non-null  float32       \n 64  ml_target            1544363 non-null  float32       \n 65  ml_target_real       1544363 non-null  float32       \ndtypes: datetime64[ns](1), float32(64), object(1)\nmemory usage: 412.4+ MB\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627292141436,
     "parent": "c.4.9",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1467035 entries, 40334 to 234812\nData columns (total 66 columns):\n #   Column               Non-Null Count    Dtype         \n---  ------               --------------    -----         \n 0   date                 1467035 non-null  datetime64[ns]\n 1   open                 1467035 non-null  float32       \n 2   high                 1467035 non-null  float32       \n 3   low                  1467035 non-null  float32       \n 4   close                1467035 non-null  float32       \n 5   volume               1467035 non-null  float32       \n 6   pair                 1467035 non-null  object        \n 7   ml_smadiff_3         1467035 non-null  float32       \n 8   ml_maxdiff_3         1467035 non-null  float32       \n 9   ml_mindiff_3         1467035 non-null  float32       \n 10  ml_std_3             1467035 non-null  float32       \n 11  ml_ma_3              1467035 non-null  float32       \n 12  ml_rsi_3             1467035 non-null  float32       \n 13  ml_smadiff_5         1467035 non-null  float32       \n 14  ml_maxdiff_5         1467035 non-null  float32       \n 15  ml_mindiff_5         1467035 non-null  float32       \n 16  ml_std_5             1467035 non-null  float32       \n 17  ml_ma_5              1467035 non-null  float32       \n 18  ml_rsi_5             1467035 non-null  float32       \n 19  ml_smadiff_9         1467035 non-null  float32       \n 20  ml_maxdiff_9         1467035 non-null  float32       \n 21  ml_mindiff_9         1467035 non-null  float32       \n 22  ml_std_9             1467035 non-null  float32       \n 23  ml_ma_9              1467035 non-null  float32       \n 24  ml_rsi_9             1467035 non-null  float32       \n 25  ml_smadiff_15        1467035 non-null  float32       \n 26  ml_maxdiff_15        1467035 non-null  float32       \n 27  ml_mindiff_15        1467035 non-null  float32       \n 28  ml_std_15            1467035 non-null  float32       \n 29  ml_ma_15             1467035 non-null  float32       \n 30  ml_rsi_15            1467035 non-null  float32       \n 31  ml_smadiff_25        1467035 non-null  float32       \n 32  ml_maxdiff_25        1467035 non-null  float32       \n 33  ml_mindiff_25        1467035 non-null  float32       \n 34  ml_std_25            1467035 non-null  float32       \n 35  ml_ma_25             1467035 non-null  float32       \n 36  ml_rsi_25            1467035 non-null  float32       \n 37  ml_smadiff_50        1467035 non-null  float32       \n 38  ml_maxdiff_50        1467035 non-null  float32       \n 39  ml_mindiff_50        1467035 non-null  float32       \n 40  ml_std_50            1467035 non-null  float32       \n 41  ml_ma_50             1467035 non-null  float32       \n 42  ml_rsi_50            1467035 non-null  float32       \n 43  ml_smadiff_100       1467035 non-null  float32       \n 44  ml_maxdiff_100       1467035 non-null  float32       \n 45  ml_mindiff_100       1467035 non-null  float32       \n 46  ml_std_100           1467035 non-null  float32       \n 47  ml_ma_100            1467035 non-null  float32       \n 48  ml_rsi_100           1467035 non-null  float32       \n 49  ml_smadiff_200       1467035 non-null  float32       \n 50  ml_maxdiff_200       1467035 non-null  float32       \n 51  ml_mindiff_200       1467035 non-null  float32       \n 52  ml_std_200           1467035 non-null  float32       \n 53  ml_ma_200            1467035 non-null  float32       \n 54  ml_rsi_200           1467035 non-null  float32       \n 55  ml_smadiff_500       1467035 non-null  float32       \n 56  ml_maxdiff_500       1467035 non-null  float32       \n 57  ml_mindiff_500       1467035 non-null  float32       \n 58  ml_std_500           1467035 non-null  float32       \n 59  ml_ma_500            1467035 non-null  float32       \n 60  ml_rsi_500           1467035 non-null  float32       \n 61  ml_bop               1467035 non-null  float32       \n 62  ml_volume_pctchange  1467035 non-null  float32       \n 63  ml_z_score_120       1467035 non-null  float32       \n 64  ml_target            1467035 non-null  float32       \n 65  ml_target_real       1467035 non-null  float32       \ndtypes: datetime64[ns](1), float32(64), object(1)\nmemory usage: 391.7+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.26",
   "versions": [
    {
     "start_checkpoint": 1627292059837,
     "parent": "c.1.8",
     "raw": [
      {
       "name": "stdout",
       "text": "The autoreload extension is already loaded. To reload it, use:\n  %reload_ext autoreload\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627292068433,
     "parent": "c.1.8",
     "raw": []
    }
   ]
  },
  {
   "artifact_name": "o.27",
   "versions": [
    {
     "start_checkpoint": 1627292408655,
     "parent": "c.7.2",
     "raw": [
      {
       "execution_count": 7,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                 date        open        high         low       close  \\\n0 2021-03-21 11:35:00  228.770004  228.770004  228.100006  228.270004   \n1 2021-04-14 18:10:00    0.007431    0.007555    0.007424    0.007515   \n2 2021-03-25 08:40:00    0.408042    0.412539    0.407679    0.410448   \n3 2021-04-30 00:20:00   10.725000   10.764000   10.708000   10.717000   \n4 2021-04-16 17:50:00    0.437500    0.438000    0.436700    0.438000   \n\n         volume        pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  \\\n0  4.157806e+01    XMR/USDT      0.219996  4.199982e-01      0.000000  ...   \n1  1.791670e+08    BTT/USDT     -0.000028  6.998889e-07     -0.000084  ...   \n2  5.570000e+05  TFUEL/USDT     -0.002968  0.000000e+00     -0.005451  ...   \n3  3.012406e+04  THETA/USDT      0.035667  9.899998e-02      0.000000  ...   \n4  8.028098e+05    XEM/USDT     -0.000833  0.000000e+00     -0.002200  ...   \n\n   ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\n0        8.919998       -0.240005    2.021409   0.000543   49.003567   \n1        0.001014       -0.000437    0.000187  -0.043147   48.327827   \n2        0.153868       -0.040888    0.049331   0.229838   49.584339   \n3        0.779000       -0.279000    0.205476  -0.006568   49.609985   \n4        0.006500       -0.037900    0.008919   0.012976   51.348499   \n\n     ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  ml_target_real  \n0 -0.746271            -0.790856        0.575470  -0.001095       -0.001095  \n1  0.637056            -0.007503       -2.163655   0.002382        0.002382  \n2  0.495061             0.740147        0.335882   0.001484        0.001484  \n3 -0.142864            -0.471822       -1.985019   0.002426        0.002426  \n4  0.384608            -0.099185        0.484829  -0.015297       -0.015297  \n\n[5 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2021-03-21 11:35:00</td>\n      <td>228.770004</td>\n      <td>228.770004</td>\n      <td>228.100006</td>\n      <td>228.270004</td>\n      <td>4.157806e+01</td>\n      <td>XMR/USDT</td>\n      <td>0.219996</td>\n      <td>4.199982e-01</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>8.919998</td>\n      <td>-0.240005</td>\n      <td>2.021409</td>\n      <td>0.000543</td>\n      <td>49.003567</td>\n      <td>-0.746271</td>\n      <td>-0.790856</td>\n      <td>0.575470</td>\n      <td>-0.001095</td>\n      <td>-0.001095</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2021-04-14 18:10:00</td>\n      <td>0.007431</td>\n      <td>0.007555</td>\n      <td>0.007424</td>\n      <td>0.007515</td>\n      <td>1.791670e+08</td>\n      <td>BTT/USDT</td>\n      <td>-0.000028</td>\n      <td>6.998889e-07</td>\n      <td>-0.000084</td>\n      <td>...</td>\n      <td>0.001014</td>\n      <td>-0.000437</td>\n      <td>0.000187</td>\n      <td>-0.043147</td>\n      <td>48.327827</td>\n      <td>0.637056</td>\n      <td>-0.007503</td>\n      <td>-2.163655</td>\n      <td>0.002382</td>\n      <td>0.002382</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2021-03-25 08:40:00</td>\n      <td>0.408042</td>\n      <td>0.412539</td>\n      <td>0.407679</td>\n      <td>0.410448</td>\n      <td>5.570000e+05</td>\n      <td>TFUEL/USDT</td>\n      <td>-0.002968</td>\n      <td>0.000000e+00</td>\n      <td>-0.005451</td>\n      <td>...</td>\n      <td>0.153868</td>\n      <td>-0.040888</td>\n      <td>0.049331</td>\n      <td>0.229838</td>\n      <td>49.584339</td>\n      <td>0.495061</td>\n      <td>0.740147</td>\n      <td>0.335882</td>\n      <td>0.001484</td>\n      <td>0.001484</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2021-04-30 00:20:00</td>\n      <td>10.725000</td>\n      <td>10.764000</td>\n      <td>10.708000</td>\n      <td>10.717000</td>\n      <td>3.012406e+04</td>\n      <td>THETA/USDT</td>\n      <td>0.035667</td>\n      <td>9.899998e-02</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.779000</td>\n      <td>-0.279000</td>\n      <td>0.205476</td>\n      <td>-0.006568</td>\n      <td>49.609985</td>\n      <td>-0.142864</td>\n      <td>-0.471822</td>\n      <td>-1.985019</td>\n      <td>0.002426</td>\n      <td>0.002426</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2021-04-16 17:50:00</td>\n      <td>0.437500</td>\n      <td>0.438000</td>\n      <td>0.436700</td>\n      <td>0.438000</td>\n      <td>8.028098e+05</td>\n      <td>XEM/USDT</td>\n      <td>-0.000833</td>\n      <td>0.000000e+00</td>\n      <td>-0.002200</td>\n      <td>...</td>\n      <td>0.006500</td>\n      <td>-0.037900</td>\n      <td>0.008919</td>\n      <td>0.012976</td>\n      <td>51.348499</td>\n      <td>0.384608</td>\n      <td>-0.099185</td>\n      <td>0.484829</td>\n      <td>-0.015297</td>\n      <td>-0.015297</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.28",
   "versions": [
    {
     "start_checkpoint": 1627292538458,
     "parent": "c.8.2",
     "raw": [
      {
       "execution_count": 9,
       "output_type": "execute_result",
       "data": {
        "text/plain": "<AxesSubplot:>"
       },
       "metadata": {}
      },
      {
       "output_type": "offsite image",
       "offsite": "output_28_0_1.png",
       "fileType": "png"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.29",
   "versions": [
    {
     "start_checkpoint": 1627292563732,
     "parent": "c.8.3",
     "raw": [
      {
       "execution_count": 10,
       "output_type": "execute_result",
       "data": {
        "text/plain": "<AxesSubplot:>"
       },
       "metadata": {}
      },
      {
       "output_type": "offsite image",
       "offsite": "output_29_0_1.png",
       "fileType": "png"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.30",
   "versions": [
    {
     "start_checkpoint": 1627372609849,
     "parent": "c.5.29",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.31",
   "versions": [
    {
     "start_checkpoint": 1627372609849,
     "parent": "c.3.8",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1467035\n",
       "output_type": "stream"
      },
      {
       "execution_count": 5,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n40334 2021-03-04 11:15:00  387.695007  387.764008  386.005005  387.171997   \n40335 2021-03-04 11:20:00  387.171997  387.500000  384.384003  385.778015   \n40336 2021-03-04 11:25:00  385.243988  385.500000  382.510010  383.493988   \n40337 2021-03-04 11:30:00  383.701996  386.937012  383.368011  386.335999   \n40338 2021-03-04 11:35:00  386.813995  388.123993  385.819000  387.714996   \n\n            volume       pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  \\\n40334   249.141998  AAVE/USDT      0.542338      0.835999      0.000000  ...   \n40335   377.921997  AAVE/USDT      1.207987      2.229980      0.000000  ...   \n40336  1298.712036  AAVE/USDT      1.987345      3.678009      0.000000  ...   \n40337   317.311005  AAVE/USDT     -1.133331      0.000000     -2.842010  ...   \n40338   558.260010  AAVE/USDT     -1.866669      0.000000     -4.221008  ...   \n\n       ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\n40334       29.884003       -9.412994    8.598591   0.045450   50.334190   \n40335       31.277985       -8.019012    8.610847   0.045215   50.245678   \n40336       33.562012       -5.734985    8.631269   0.044950   50.101040   \n40337       30.720001       -8.576996    8.646262   0.044659   50.279491   \n40338       29.341003       -9.955994    8.656794   0.044433   50.365791   \n\n         ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  \\\n40334 -0.297333             1.347208        1.311475        1.0   \n40335 -0.447363             0.516894        1.429759        1.0   \n40336 -0.585286             2.436455        1.632589        2.0   \n40337  0.738023            -0.755673        1.665520        1.0   \n40338  0.390891             0.759346        1.675234        0.0   \n\n       ml_target_real  \n40334        0.001402  \n40335        0.002641  \n40336        0.007288  \n40337       -0.000489  \n40338       -0.004418  \n\n[5 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40334</th>\n      <td>2021-03-04 11:15:00</td>\n      <td>387.695007</td>\n      <td>387.764008</td>\n      <td>386.005005</td>\n      <td>387.171997</td>\n      <td>249.141998</td>\n      <td>AAVE/USDT</td>\n      <td>0.542338</td>\n      <td>0.835999</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>29.884003</td>\n      <td>-9.412994</td>\n      <td>8.598591</td>\n      <td>0.045450</td>\n      <td>50.334190</td>\n      <td>-0.297333</td>\n      <td>1.347208</td>\n      <td>1.311475</td>\n      <td>1.0</td>\n      <td>0.001402</td>\n    </tr>\n    <tr>\n      <th>40335</th>\n      <td>2021-03-04 11:20:00</td>\n      <td>387.171997</td>\n      <td>387.500000</td>\n      <td>384.384003</td>\n      <td>385.778015</td>\n      <td>377.921997</td>\n      <td>AAVE/USDT</td>\n      <td>1.207987</td>\n      <td>2.229980</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>31.277985</td>\n      <td>-8.019012</td>\n      <td>8.610847</td>\n      <td>0.045215</td>\n      <td>50.245678</td>\n      <td>-0.447363</td>\n      <td>0.516894</td>\n      <td>1.429759</td>\n      <td>1.0</td>\n      <td>0.002641</td>\n    </tr>\n    <tr>\n      <th>40336</th>\n      <td>2021-03-04 11:25:00</td>\n      <td>385.243988</td>\n      <td>385.500000</td>\n      <td>382.510010</td>\n      <td>383.493988</td>\n      <td>1298.712036</td>\n      <td>AAVE/USDT</td>\n      <td>1.987345</td>\n      <td>3.678009</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>33.562012</td>\n      <td>-5.734985</td>\n      <td>8.631269</td>\n      <td>0.044950</td>\n      <td>50.101040</td>\n      <td>-0.585286</td>\n      <td>2.436455</td>\n      <td>1.632589</td>\n      <td>2.0</td>\n      <td>0.007288</td>\n    </tr>\n    <tr>\n      <th>40337</th>\n      <td>2021-03-04 11:30:00</td>\n      <td>383.701996</td>\n      <td>386.937012</td>\n      <td>383.368011</td>\n      <td>386.335999</td>\n      <td>317.311005</td>\n      <td>AAVE/USDT</td>\n      <td>-1.133331</td>\n      <td>0.000000</td>\n      <td>-2.842010</td>\n      <td>...</td>\n      <td>30.720001</td>\n      <td>-8.576996</td>\n      <td>8.646262</td>\n      <td>0.044659</td>\n      <td>50.279491</td>\n      <td>0.738023</td>\n      <td>-0.755673</td>\n      <td>1.665520</td>\n      <td>1.0</td>\n      <td>-0.000489</td>\n    </tr>\n    <tr>\n      <th>40338</th>\n      <td>2021-03-04 11:35:00</td>\n      <td>386.813995</td>\n      <td>388.123993</td>\n      <td>385.819000</td>\n      <td>387.714996</td>\n      <td>558.260010</td>\n      <td>AAVE/USDT</td>\n      <td>-1.866669</td>\n      <td>0.000000</td>\n      <td>-4.221008</td>\n      <td>...</td>\n      <td>29.341003</td>\n      <td>-9.955994</td>\n      <td>8.656794</td>\n      <td>0.044433</td>\n      <td>50.365791</td>\n      <td>0.390891</td>\n      <td>0.759346</td>\n      <td>1.675234</td>\n      <td>0.0</td>\n      <td>-0.004418</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    },
    {
     "start_checkpoint": 1627374475357,
     "parent": "c.3.8",
     "raw": [
      {
       "name": "stdout",
       "text": "Dataframe Rows: 1466973\n",
       "output_type": "stream"
      },
      {
       "execution_count": 25,
       "output_type": "execute_result",
       "data": {
        "text/plain": "                     date        open        high         low       close  \\\n40336 2021-03-04 11:25:00  385.243988  385.500000  382.510010  383.493988   \n40341 2021-03-04 11:50:00  385.908997  386.854004  385.816986  386.147003   \n40342 2021-03-04 11:55:00  386.123993  386.596008  385.654999  386.002014   \n40343 2021-03-04 12:00:00  385.649994  388.500000  383.649994  384.178986   \n40344 2021-03-04 12:05:00  384.170013  387.996002  383.920013  387.093994   \n\n            volume       pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  \\\n40336  1298.712036  AAVE/USDT      1.987345      3.678009      0.000000  ...   \n40341   160.425995  AAVE/USDT      0.263997      0.649994      0.000000  ...   \n40342   476.988007  AAVE/USDT      0.143992      0.286987      0.000000  ...   \n40343   423.691986  AAVE/USDT      1.263682      1.968018      0.000000  ...   \n40344   310.644989  AAVE/USDT     -1.335663      0.000000     -2.915009  ...   \n\n       ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\n40336       33.562012       -5.734985    8.631269   0.044950   50.101040   \n40341       30.908997       -8.388000    8.697610   0.043788   50.266285   \n40342       31.053986       -8.243011    8.709859   0.043627   50.257057   \n40343       32.877014       -6.419983    8.729833   0.043441   50.141098   \n40344       29.962006       -9.334991    8.741722   0.043254   50.324741   \n\n         ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  \\\n40336 -0.585286             2.436455        1.632589        2.0   \n40341  0.229511             1.005400        1.312327        2.0   \n40342 -0.129625             1.973259        1.039620        2.0   \n40343 -0.303300            -0.111735        0.812169        2.0   \n40344  0.717367            -0.266814        0.739566        2.0   \n\n       ml_target_real  \n40336        0.007288  \n40341        0.006272  \n40342        0.014344  \n40343        0.017705  \n40344        0.010266  \n\n[5 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40336</th>\n      <td>2021-03-04 11:25:00</td>\n      <td>385.243988</td>\n      <td>385.500000</td>\n      <td>382.510010</td>\n      <td>383.493988</td>\n      <td>1298.712036</td>\n      <td>AAVE/USDT</td>\n      <td>1.987345</td>\n      <td>3.678009</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>33.562012</td>\n      <td>-5.734985</td>\n      <td>8.631269</td>\n      <td>0.044950</td>\n      <td>50.101040</td>\n      <td>-0.585286</td>\n      <td>2.436455</td>\n      <td>1.632589</td>\n      <td>2.0</td>\n      <td>0.007288</td>\n    </tr>\n    <tr>\n      <th>40341</th>\n      <td>2021-03-04 11:50:00</td>\n      <td>385.908997</td>\n      <td>386.854004</td>\n      <td>385.816986</td>\n      <td>386.147003</td>\n      <td>160.425995</td>\n      <td>AAVE/USDT</td>\n      <td>0.263997</td>\n      <td>0.649994</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>30.908997</td>\n      <td>-8.388000</td>\n      <td>8.697610</td>\n      <td>0.043788</td>\n      <td>50.266285</td>\n      <td>0.229511</td>\n      <td>1.005400</td>\n      <td>1.312327</td>\n      <td>2.0</td>\n      <td>0.006272</td>\n    </tr>\n    <tr>\n      <th>40342</th>\n      <td>2021-03-04 11:55:00</td>\n      <td>386.123993</td>\n      <td>386.596008</td>\n      <td>385.654999</td>\n      <td>386.002014</td>\n      <td>476.988007</td>\n      <td>AAVE/USDT</td>\n      <td>0.143992</td>\n      <td>0.286987</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>31.053986</td>\n      <td>-8.243011</td>\n      <td>8.709859</td>\n      <td>0.043627</td>\n      <td>50.257057</td>\n      <td>-0.129625</td>\n      <td>1.973259</td>\n      <td>1.039620</td>\n      <td>2.0</td>\n      <td>0.014344</td>\n    </tr>\n    <tr>\n      <th>40343</th>\n      <td>2021-03-04 12:00:00</td>\n      <td>385.649994</td>\n      <td>388.500000</td>\n      <td>383.649994</td>\n      <td>384.178986</td>\n      <td>423.691986</td>\n      <td>AAVE/USDT</td>\n      <td>1.263682</td>\n      <td>1.968018</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>32.877014</td>\n      <td>-6.419983</td>\n      <td>8.729833</td>\n      <td>0.043441</td>\n      <td>50.141098</td>\n      <td>-0.303300</td>\n      <td>-0.111735</td>\n      <td>0.812169</td>\n      <td>2.0</td>\n      <td>0.017705</td>\n    </tr>\n    <tr>\n      <th>40344</th>\n      <td>2021-03-04 12:05:00</td>\n      <td>384.170013</td>\n      <td>387.996002</td>\n      <td>383.920013</td>\n      <td>387.093994</td>\n      <td>310.644989</td>\n      <td>AAVE/USDT</td>\n      <td>-1.335663</td>\n      <td>0.000000</td>\n      <td>-2.915009</td>\n      <td>...</td>\n      <td>29.962006</td>\n      <td>-9.334991</td>\n      <td>8.741722</td>\n      <td>0.043254</td>\n      <td>50.324741</td>\n      <td>0.717367</td>\n      <td>-0.266814</td>\n      <td>0.739566</td>\n      <td>2.0</td>\n      <td>0.010266</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.32",
   "versions": [
    {
     "start_checkpoint": 1627372609849,
     "parent": "c.4.10",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1467035 entries, 40334 to 234812\nData columns (total 66 columns):\n #   Column               Non-Null Count    Dtype         \n---  ------               --------------    -----         \n 0   date                 1467035 non-null  datetime64[ns]\n 1   open                 1467035 non-null  float32       \n 2   high                 1467035 non-null  float32       \n 3   low                  1467035 non-null  float32       \n 4   close                1467035 non-null  float32       \n 5   volume               1467035 non-null  float32       \n 6   pair                 1467035 non-null  object        \n 7   ml_smadiff_3         1467035 non-null  float32       \n 8   ml_maxdiff_3         1467035 non-null  float32       \n 9   ml_mindiff_3         1467035 non-null  float32       \n 10  ml_std_3             1467035 non-null  float32       \n 11  ml_ma_3              1467035 non-null  float32       \n 12  ml_rsi_3             1467035 non-null  float32       \n 13  ml_smadiff_5         1467035 non-null  float32       \n 14  ml_maxdiff_5         1467035 non-null  float32       \n 15  ml_mindiff_5         1467035 non-null  float32       \n 16  ml_std_5             1467035 non-null  float32       \n 17  ml_ma_5              1467035 non-null  float32       \n 18  ml_rsi_5             1467035 non-null  float32       \n 19  ml_smadiff_9         1467035 non-null  float32       \n 20  ml_maxdiff_9         1467035 non-null  float32       \n 21  ml_mindiff_9         1467035 non-null  float32       \n 22  ml_std_9             1467035 non-null  float32       \n 23  ml_ma_9              1467035 non-null  float32       \n 24  ml_rsi_9             1467035 non-null  float32       \n 25  ml_smadiff_15        1467035 non-null  float32       \n 26  ml_maxdiff_15        1467035 non-null  float32       \n 27  ml_mindiff_15        1467035 non-null  float32       \n 28  ml_std_15            1467035 non-null  float32       \n 29  ml_ma_15             1467035 non-null  float32       \n 30  ml_rsi_15            1467035 non-null  float32       \n 31  ml_smadiff_25        1467035 non-null  float32       \n 32  ml_maxdiff_25        1467035 non-null  float32       \n 33  ml_mindiff_25        1467035 non-null  float32       \n 34  ml_std_25            1467035 non-null  float32       \n 35  ml_ma_25             1467035 non-null  float32       \n 36  ml_rsi_25            1467035 non-null  float32       \n 37  ml_smadiff_50        1467035 non-null  float32       \n 38  ml_maxdiff_50        1467035 non-null  float32       \n 39  ml_mindiff_50        1467035 non-null  float32       \n 40  ml_std_50            1467035 non-null  float32       \n 41  ml_ma_50             1467035 non-null  float32       \n 42  ml_rsi_50            1467035 non-null  float32       \n 43  ml_smadiff_100       1467035 non-null  float32       \n 44  ml_maxdiff_100       1467035 non-null  float32       \n 45  ml_mindiff_100       1467035 non-null  float32       \n 46  ml_std_100           1467035 non-null  float32       \n 47  ml_ma_100            1467035 non-null  float32       \n 48  ml_rsi_100           1467035 non-null  float32       \n 49  ml_smadiff_200       1467035 non-null  float32       \n 50  ml_maxdiff_200       1467035 non-null  float32       \n 51  ml_mindiff_200       1467035 non-null  float32       \n 52  ml_std_200           1467035 non-null  float32       \n 53  ml_ma_200            1467035 non-null  float32       \n 54  ml_rsi_200           1467035 non-null  float32       \n 55  ml_smadiff_500       1467035 non-null  float32       \n 56  ml_maxdiff_500       1467035 non-null  float32       \n 57  ml_mindiff_500       1467035 non-null  float32       \n 58  ml_std_500           1467035 non-null  float32       \n 59  ml_ma_500            1467035 non-null  float32       \n 60  ml_rsi_500           1467035 non-null  float32       \n 61  ml_bop               1467035 non-null  float32       \n 62  ml_volume_pctchange  1467035 non-null  float32       \n 63  ml_z_score_120       1467035 non-null  float32       \n 64  ml_target            1467035 non-null  float32       \n 65  ml_target_real       1467035 non-null  float32       \ndtypes: datetime64[ns](1), float32(64), object(1)\nmemory usage: 391.7+ MB\n",
       "output_type": "stream"
      }
     ]
    },
    {
     "start_checkpoint": 1627374475357,
     "parent": "c.4.10",
     "raw": [
      {
       "name": "stdout",
       "text": "<class 'pandas.core.frame.DataFrame'>\nInt64Index: 1466973 entries, 40336 to 234809\nData columns (total 66 columns):\n #   Column               Non-Null Count    Dtype         \n---  ------               --------------    -----         \n 0   date                 1466973 non-null  datetime64[ns]\n 1   open                 1466973 non-null  float32       \n 2   high                 1466973 non-null  float32       \n 3   low                  1466973 non-null  float32       \n 4   close                1466973 non-null  float32       \n 5   volume               1466973 non-null  float32       \n 6   pair                 1466973 non-null  object        \n 7   ml_smadiff_3         1466973 non-null  float32       \n 8   ml_maxdiff_3         1466973 non-null  float32       \n 9   ml_mindiff_3         1466973 non-null  float32       \n 10  ml_std_3             1466973 non-null  float32       \n 11  ml_ma_3              1466973 non-null  float32       \n 12  ml_rsi_3             1466973 non-null  float32       \n 13  ml_smadiff_5         1466973 non-null  float32       \n 14  ml_maxdiff_5         1466973 non-null  float32       \n 15  ml_mindiff_5         1466973 non-null  float32       \n 16  ml_std_5             1466973 non-null  float32       \n 17  ml_ma_5              1466973 non-null  float32       \n 18  ml_rsi_5             1466973 non-null  float32       \n 19  ml_smadiff_9         1466973 non-null  float32       \n 20  ml_maxdiff_9         1466973 non-null  float32       \n 21  ml_mindiff_9         1466973 non-null  float32       \n 22  ml_std_9             1466973 non-null  float32       \n 23  ml_ma_9              1466973 non-null  float32       \n 24  ml_rsi_9             1466973 non-null  float32       \n 25  ml_smadiff_15        1466973 non-null  float32       \n 26  ml_maxdiff_15        1466973 non-null  float32       \n 27  ml_mindiff_15        1466973 non-null  float32       \n 28  ml_std_15            1466973 non-null  float32       \n 29  ml_ma_15             1466973 non-null  float32       \n 30  ml_rsi_15            1466973 non-null  float32       \n 31  ml_smadiff_25        1466973 non-null  float32       \n 32  ml_maxdiff_25        1466973 non-null  float32       \n 33  ml_mindiff_25        1466973 non-null  float32       \n 34  ml_std_25            1466973 non-null  float32       \n 35  ml_ma_25             1466973 non-null  float32       \n 36  ml_rsi_25            1466973 non-null  float32       \n 37  ml_smadiff_50        1466973 non-null  float32       \n 38  ml_maxdiff_50        1466973 non-null  float32       \n 39  ml_mindiff_50        1466973 non-null  float32       \n 40  ml_std_50            1466973 non-null  float32       \n 41  ml_ma_50             1466973 non-null  float32       \n 42  ml_rsi_50            1466973 non-null  float32       \n 43  ml_smadiff_100       1466973 non-null  float32       \n 44  ml_maxdiff_100       1466973 non-null  float32       \n 45  ml_mindiff_100       1466973 non-null  float32       \n 46  ml_std_100           1466973 non-null  float32       \n 47  ml_ma_100            1466973 non-null  float32       \n 48  ml_rsi_100           1466973 non-null  float32       \n 49  ml_smadiff_200       1466973 non-null  float32       \n 50  ml_maxdiff_200       1466973 non-null  float32       \n 51  ml_mindiff_200       1466973 non-null  float32       \n 52  ml_std_200           1466973 non-null  float32       \n 53  ml_ma_200            1466973 non-null  float32       \n 54  ml_rsi_200           1466973 non-null  float32       \n 55  ml_smadiff_500       1466973 non-null  float32       \n 56  ml_maxdiff_500       1466973 non-null  float32       \n 57  ml_mindiff_500       1466973 non-null  float32       \n 58  ml_std_500           1466973 non-null  float32       \n 59  ml_ma_500            1466973 non-null  float32       \n 60  ml_rsi_500           1466973 non-null  float32       \n 61  ml_bop               1466973 non-null  float32       \n 62  ml_volume_pctchange  1466973 non-null  float32       \n 63  ml_z_score_120       1466973 non-null  float32       \n 64  ml_target            1466973 non-null  float32       \n 65  ml_target_real       1466973 non-null  float32       \ndtypes: datetime64[ns](1), float32(64), object(1)\nmemory usage: 391.7+ MB\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.33",
   "versions": [
    {
     "start_checkpoint": 1627372714315,
     "parent": "c.10.1",
     "raw": [
      {
       "execution_count": 9,
       "output_type": "execute_result",
       "data": {
        "text/plain": "<pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000021893C716D0>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.34",
   "versions": [
    {
     "start_checkpoint": 1627372723034,
     "parent": "c.10.2",
     "raw": [
      {
       "execution_count": 10,
       "output_type": "execute_result",
       "data": {
        "text/plain": "             date    open    high     low   close  volume    pair  \\\nml_target                                                           \n0.0        489647  489647  489647  489647  489647  489647  489647   \n1.0        490449  490449  490449  490449  490449  490449  490449   \n2.0        486939  486939  486939  486939  486939  486939  486939   \n\n           ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  ml_smadiff_500  \\\nml_target                                            ...                   \n0.0              489647        489647        489647  ...          489647   \n1.0              490449        490449        490449  ...          490449   \n2.0              486939        486939        486939  ...          486939   \n\n           ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\nml_target                                                                      \n0.0                489647          489647      489647     489647      489647   \n1.0                490449          490449      490449     490449      490449   \n2.0                486939          486939      486939     486939      486939   \n\n           ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target_real  \nml_target                                                               \n0.0        489647               489647          489647          489647  \n1.0        490449               490449          490449          490449  \n2.0        486939               486939          486939          486939  \n\n[3 rows x 65 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_smadiff_500</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target_real</th>\n    </tr>\n    <tr>\n      <th>ml_target</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0</th>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>...</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n    </tr>\n    <tr>\n      <th>1.0</th>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>...</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>...</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 65 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.35",
   "versions": [
    {
     "start_checkpoint": 1627373578373,
     "parent": "c.10.8",
     "raw": [
      {
       "execution_count": 17,
       "output_type": "execute_result",
       "data": {
        "text/plain": "['date',\n 'open',\n 'high',\n 'low',\n 'close',\n 'volume',\n 'pair',\n 'ml_smadiff_3',\n 'ml_maxdiff_3',\n 'ml_mindiff_3',\n 'ml_std_3',\n 'ml_ma_3',\n 'ml_rsi_3',\n 'ml_smadiff_5',\n 'ml_maxdiff_5',\n 'ml_mindiff_5',\n 'ml_std_5',\n 'ml_ma_5',\n 'ml_rsi_5',\n 'ml_smadiff_9',\n 'ml_maxdiff_9',\n 'ml_mindiff_9',\n 'ml_std_9',\n 'ml_ma_9',\n 'ml_rsi_9',\n 'ml_smadiff_15',\n 'ml_maxdiff_15',\n 'ml_mindiff_15',\n 'ml_std_15',\n 'ml_ma_15',\n 'ml_rsi_15',\n 'ml_smadiff_25',\n 'ml_maxdiff_25',\n 'ml_mindiff_25',\n 'ml_std_25',\n 'ml_ma_25',\n 'ml_rsi_25',\n 'ml_smadiff_50',\n 'ml_maxdiff_50',\n 'ml_mindiff_50',\n 'ml_std_50',\n 'ml_ma_50',\n 'ml_rsi_50',\n 'ml_smadiff_100',\n 'ml_maxdiff_100',\n 'ml_mindiff_100',\n 'ml_std_100',\n 'ml_ma_100',\n 'ml_rsi_100',\n 'ml_smadiff_200',\n 'ml_maxdiff_200',\n 'ml_mindiff_200',\n 'ml_std_200',\n 'ml_ma_200',\n 'ml_rsi_200',\n 'ml_smadiff_500',\n 'ml_maxdiff_500',\n 'ml_mindiff_500',\n 'ml_std_500',\n 'ml_ma_500',\n 'ml_rsi_500',\n 'ml_bop',\n 'ml_volume_pctchange',\n 'ml_z_score_120',\n 'ml_target_real']"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.36",
   "versions": [
    {
     "start_checkpoint": 1627373748038,
     "parent": "c.10.9",
     "raw": [
      {
       "execution_count": 18,
       "output_type": "execute_result",
       "data": {
        "text/plain": "             date    open    high     low   close  volume    pair  \\\nml_target                                                           \n0.0        489647  489647  489647  489647  489647  489647  489647   \n1.0        490449  490449  490449  490449  490449  490449  490449   \n2.0        486939  486939  486939  486939  486939  486939  486939   \n\n           ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  ...  ml_smadiff_500  \\\nml_target                                            ...                   \n0.0              489647        489647        489647  ...          489647   \n1.0              490449        490449        490449  ...          490449   \n2.0              486939        486939        486939  ...          486939   \n\n           ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  ml_rsi_500  \\\nml_target                                                                      \n0.0                489647          489647      489647     489647      489647   \n1.0                490449          490449      490449     490449      490449   \n2.0                486939          486939      486939     486939      486939   \n\n           ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target_real  \nml_target                                                               \n0.0        489647               489647          489647          489647  \n1.0        490449               490449          490449          490449  \n2.0        486939               486939          486939          486939  \n\n[3 rows x 65 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_smadiff_500</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target_real</th>\n    </tr>\n    <tr>\n      <th>ml_target</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.0</th>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>...</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n      <td>489647</td>\n    </tr>\n    <tr>\n      <th>1.0</th>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>...</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n      <td>490449</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>...</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n      <td>486939</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 65 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.37",
   "versions": [
    {
     "start_checkpoint": 1627373769966,
     "parent": "c.10.10",
     "raw": [
      {
       "execution_count": 19,
       "output_type": "execute_result",
       "data": {
        "text/plain": "ml_target\n0.0    489647\n1.0    490449\n2.0    486939\nName: date, dtype: int64"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.38",
   "versions": [
    {
     "start_checkpoint": 1627373781332,
     "parent": "c.10.11",
     "raw": [
      {
       "execution_count": 20,
       "output_type": "execute_result",
       "data": {
        "text/plain": "[489647, 490449, 486939]"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.39",
   "versions": [
    {
     "start_checkpoint": 1627373821079,
     "parent": "c.10.12",
     "raw": [
      {
       "execution_count": 21,
       "output_type": "execute_result",
       "data": {
        "text/plain": "ml_target\n0.0    486939\n1.0    486939\n2.0    486939\nName: date, dtype: int64"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.40",
   "versions": [
    {
     "start_checkpoint": 1627373837790,
     "parent": "c.10.13",
     "raw": [
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "ml_target\n0.0    486939\n1.0    486939\n2.0    486939\nName: date, dtype: int64"
       },
       "metadata": {}
      },
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "                      date        open        high         low       close  \\\n40334  2021-03-04 11:15:00  387.695007  387.764008  386.005005  387.171997   \n40335  2021-03-04 11:20:00  387.171997  387.500000  384.384003  385.778015   \n40337  2021-03-04 11:30:00  383.701996  386.937012  383.368011  386.335999   \n40340  2021-03-04 11:45:00  386.273010  386.920013  385.816986  386.289001   \n40345  2021-03-04 12:10:00  387.097992  389.000000  387.037994  388.569000   \n...                    ...         ...         ...         ...         ...   \n227193 2021-04-29 12:45:00    1.751900    1.752500    1.743800    1.746600   \n227194 2021-04-29 12:50:00    1.749500    1.749600    1.744300    1.747800   \n227195 2021-04-29 12:55:00    1.748800    1.748800    1.728100    1.730200   \n227196 2021-04-29 13:00:00    1.730200    1.742300    1.728100    1.740000   \n227197 2021-04-29 13:05:00    1.740400    1.740400    1.723200    1.725700   \n\n              volume       pair  ml_smadiff_3  ml_maxdiff_3  ml_mindiff_3  \\\n40334     249.141998  AAVE/USDT      0.542338      0.835999      0.000000   \n40335     377.921997  AAVE/USDT      1.207987      2.229980      0.000000   \n40337     317.311005  AAVE/USDT     -1.133331      0.000000     -2.842010   \n40340      79.997002  AAVE/USDT      0.644664      1.425995      0.000000   \n40345     164.813995  AAVE/USDT     -1.955007      0.000000     -4.390015   \n...              ...        ...           ...           ...           ...   \n227193  16698.710938   ZRX/USDT      0.004700      0.008400      0.000000   \n227194  12224.839844   ZRX/USDT      0.001100      0.004500     -0.001200   \n227195  80321.546875   ZRX/USDT      0.011333      0.017600      0.000000   \n227196  35431.250000   ZRX/USDT     -0.000667      0.007800     -0.009800   \n227197  42730.070312   ZRX/USDT      0.006267      0.014300      0.000000   \n\n        ...  ml_maxdiff_500  ml_mindiff_500  ml_std_500  ml_ma_500  \\\n40334   ...       29.884003       -9.412994    8.598591   0.045450   \n40335   ...       31.277985       -8.019012    8.610847   0.045215   \n40337   ...       30.720001       -8.576996    8.646262   0.044659   \n40340   ...       30.766998       -8.529999    8.682402   0.044008   \n40345   ...       28.487000      -10.809998    8.749470   0.043087   \n...     ...             ...             ...         ...        ...   \n227193  ...        0.112300       -0.111800    0.051546   0.111069   \n227194  ...        0.111100       -0.113000    0.051283   0.110365   \n227195  ...        0.125800       -0.095400    0.050926   0.109619   \n227196  ...        0.116000       -0.105200    0.050663   0.108912   \n227197  ...        0.130300       -0.090900    0.050477   0.108268   \n\n        ml_rsi_500    ml_bop  ml_volume_pctchange  ml_z_score_120  ml_target  \\\n40334    50.334190 -0.297333             1.347208        1.311475        1.0   \n40335    50.245678 -0.447363             0.516894        1.429759        1.0   \n40337    50.279491  0.738023            -0.755673        1.665520        1.0   \n40340    50.275307  0.014498            -0.755307        1.549771        1.0   \n40345    50.417336  0.749747            -0.469446        0.586118        1.0   \n...            ...       ...                  ...             ...        ...   \n227193   51.423649 -0.609186            -0.307724       -1.830198        0.0   \n227194   51.440693 -0.320760            -0.267917       -1.809679        0.0   \n227195   51.176796 -0.898546             5.570356       -1.928157        0.0   \n227196   51.316143  0.690133            -0.558882       -1.984751        0.0   \n227197   51.102886 -0.854648             0.205999       -2.108355        0.0   \n\n        ml_target_real  \n40334         0.001402  \n40335         0.002641  \n40337        -0.000489  \n40340         0.002084  \n40345         0.003135  \n...                ...  \n227193       -0.011966  \n227194       -0.017737  \n227195       -0.012715  \n227196       -0.020115  \n227197       -0.009677  \n\n[1460817 rows x 66 columns]",
        "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n      <th>open</th>\n      <th>high</th>\n      <th>low</th>\n      <th>close</th>\n      <th>volume</th>\n      <th>pair</th>\n      <th>ml_smadiff_3</th>\n      <th>ml_maxdiff_3</th>\n      <th>ml_mindiff_3</th>\n      <th>...</th>\n      <th>ml_maxdiff_500</th>\n      <th>ml_mindiff_500</th>\n      <th>ml_std_500</th>\n      <th>ml_ma_500</th>\n      <th>ml_rsi_500</th>\n      <th>ml_bop</th>\n      <th>ml_volume_pctchange</th>\n      <th>ml_z_score_120</th>\n      <th>ml_target</th>\n      <th>ml_target_real</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>40334</th>\n      <td>2021-03-04 11:15:00</td>\n      <td>387.695007</td>\n      <td>387.764008</td>\n      <td>386.005005</td>\n      <td>387.171997</td>\n      <td>249.141998</td>\n      <td>AAVE/USDT</td>\n      <td>0.542338</td>\n      <td>0.835999</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>29.884003</td>\n      <td>-9.412994</td>\n      <td>8.598591</td>\n      <td>0.045450</td>\n      <td>50.334190</td>\n      <td>-0.297333</td>\n      <td>1.347208</td>\n      <td>1.311475</td>\n      <td>1.0</td>\n      <td>0.001402</td>\n    </tr>\n    <tr>\n      <th>40335</th>\n      <td>2021-03-04 11:20:00</td>\n      <td>387.171997</td>\n      <td>387.500000</td>\n      <td>384.384003</td>\n      <td>385.778015</td>\n      <td>377.921997</td>\n      <td>AAVE/USDT</td>\n      <td>1.207987</td>\n      <td>2.229980</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>31.277985</td>\n      <td>-8.019012</td>\n      <td>8.610847</td>\n      <td>0.045215</td>\n      <td>50.245678</td>\n      <td>-0.447363</td>\n      <td>0.516894</td>\n      <td>1.429759</td>\n      <td>1.0</td>\n      <td>0.002641</td>\n    </tr>\n    <tr>\n      <th>40337</th>\n      <td>2021-03-04 11:30:00</td>\n      <td>383.701996</td>\n      <td>386.937012</td>\n      <td>383.368011</td>\n      <td>386.335999</td>\n      <td>317.311005</td>\n      <td>AAVE/USDT</td>\n      <td>-1.133331</td>\n      <td>0.000000</td>\n      <td>-2.842010</td>\n      <td>...</td>\n      <td>30.720001</td>\n      <td>-8.576996</td>\n      <td>8.646262</td>\n      <td>0.044659</td>\n      <td>50.279491</td>\n      <td>0.738023</td>\n      <td>-0.755673</td>\n      <td>1.665520</td>\n      <td>1.0</td>\n      <td>-0.000489</td>\n    </tr>\n    <tr>\n      <th>40340</th>\n      <td>2021-03-04 11:45:00</td>\n      <td>386.273010</td>\n      <td>386.920013</td>\n      <td>385.816986</td>\n      <td>386.289001</td>\n      <td>79.997002</td>\n      <td>AAVE/USDT</td>\n      <td>0.644664</td>\n      <td>1.425995</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>30.766998</td>\n      <td>-8.529999</td>\n      <td>8.682402</td>\n      <td>0.044008</td>\n      <td>50.275307</td>\n      <td>0.014498</td>\n      <td>-0.755307</td>\n      <td>1.549771</td>\n      <td>1.0</td>\n      <td>0.002084</td>\n    </tr>\n    <tr>\n      <th>40345</th>\n      <td>2021-03-04 12:10:00</td>\n      <td>387.097992</td>\n      <td>389.000000</td>\n      <td>387.037994</td>\n      <td>388.569000</td>\n      <td>164.813995</td>\n      <td>AAVE/USDT</td>\n      <td>-1.955007</td>\n      <td>0.000000</td>\n      <td>-4.390015</td>\n      <td>...</td>\n      <td>28.487000</td>\n      <td>-10.809998</td>\n      <td>8.749470</td>\n      <td>0.043087</td>\n      <td>50.417336</td>\n      <td>0.749747</td>\n      <td>-0.469446</td>\n      <td>0.586118</td>\n      <td>1.0</td>\n      <td>0.003135</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>227193</th>\n      <td>2021-04-29 12:45:00</td>\n      <td>1.751900</td>\n      <td>1.752500</td>\n      <td>1.743800</td>\n      <td>1.746600</td>\n      <td>16698.710938</td>\n      <td>ZRX/USDT</td>\n      <td>0.004700</td>\n      <td>0.008400</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.112300</td>\n      <td>-0.111800</td>\n      <td>0.051546</td>\n      <td>0.111069</td>\n      <td>51.423649</td>\n      <td>-0.609186</td>\n      <td>-0.307724</td>\n      <td>-1.830198</td>\n      <td>0.0</td>\n      <td>-0.011966</td>\n    </tr>\n    <tr>\n      <th>227194</th>\n      <td>2021-04-29 12:50:00</td>\n      <td>1.749500</td>\n      <td>1.749600</td>\n      <td>1.744300</td>\n      <td>1.747800</td>\n      <td>12224.839844</td>\n      <td>ZRX/USDT</td>\n      <td>0.001100</td>\n      <td>0.004500</td>\n      <td>-0.001200</td>\n      <td>...</td>\n      <td>0.111100</td>\n      <td>-0.113000</td>\n      <td>0.051283</td>\n      <td>0.110365</td>\n      <td>51.440693</td>\n      <td>-0.320760</td>\n      <td>-0.267917</td>\n      <td>-1.809679</td>\n      <td>0.0</td>\n      <td>-0.017737</td>\n    </tr>\n    <tr>\n      <th>227195</th>\n      <td>2021-04-29 12:55:00</td>\n      <td>1.748800</td>\n      <td>1.748800</td>\n      <td>1.728100</td>\n      <td>1.730200</td>\n      <td>80321.546875</td>\n      <td>ZRX/USDT</td>\n      <td>0.011333</td>\n      <td>0.017600</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.125800</td>\n      <td>-0.095400</td>\n      <td>0.050926</td>\n      <td>0.109619</td>\n      <td>51.176796</td>\n      <td>-0.898546</td>\n      <td>5.570356</td>\n      <td>-1.928157</td>\n      <td>0.0</td>\n      <td>-0.012715</td>\n    </tr>\n    <tr>\n      <th>227196</th>\n      <td>2021-04-29 13:00:00</td>\n      <td>1.730200</td>\n      <td>1.742300</td>\n      <td>1.728100</td>\n      <td>1.740000</td>\n      <td>35431.250000</td>\n      <td>ZRX/USDT</td>\n      <td>-0.000667</td>\n      <td>0.007800</td>\n      <td>-0.009800</td>\n      <td>...</td>\n      <td>0.116000</td>\n      <td>-0.105200</td>\n      <td>0.050663</td>\n      <td>0.108912</td>\n      <td>51.316143</td>\n      <td>0.690133</td>\n      <td>-0.558882</td>\n      <td>-1.984751</td>\n      <td>0.0</td>\n      <td>-0.020115</td>\n    </tr>\n    <tr>\n      <th>227197</th>\n      <td>2021-04-29 13:05:00</td>\n      <td>1.740400</td>\n      <td>1.740400</td>\n      <td>1.723200</td>\n      <td>1.725700</td>\n      <td>42730.070312</td>\n      <td>ZRX/USDT</td>\n      <td>0.006267</td>\n      <td>0.014300</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.130300</td>\n      <td>-0.090900</td>\n      <td>0.050477</td>\n      <td>0.108268</td>\n      <td>51.102886</td>\n      <td>-0.854648</td>\n      <td>0.205999</td>\n      <td>-2.108355</td>\n      <td>0.0</td>\n      <td>-0.009677</td>\n    </tr>\n  </tbody>\n</table>\n<p>1460817 rows × 66 columns</p>\n</div>"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.41",
   "versions": [
    {
     "start_checkpoint": 1627374475357,
     "parent": "c.5.32",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.42",
   "versions": [
    {
     "start_checkpoint": 1627374475357,
     "parent": "c.10.14",
     "raw": [
      {
       "output_type": "display_data",
       "data": {
        "text/plain": "ml_target\n0.0    489585\n1.0    490449\n2.0    486939\nName: date, dtype: int64"
       },
       "metadata": {}
      }
     ]
    }
   ]
  },
  {
   "artifact_name": "o.43",
   "versions": [
    {
     "start_checkpoint": 1627550689090,
     "parent": "c.11.0",
     "raw": [
      {
       "name": "stdout",
       "text": "Loading: AAVE_USDT-5m.json\nLoading: ADA_USDT-5m.json\nLoading: ALGO_USDT-5m.json\nLoading: ANKR_USDT-5m.json\nLoading: ATOM_USDT-5m.json\nLoading: AVAX_USDT-5m.json\nLoading: BAT_USDT-5m.json\nLoading: BCH_USDT-5m.json\nLoading: BNB_USDT-5m.json\nLoading: BNT_USDT-5m.json\nLoading: BTC_USDT-5m.json\nLoading: BTT_USDT-5m.json\nLoading: CHZ_USDT-5m.json\nLoading: COMP_USDT-5m.json\nLoading: CRV_USDT-5m.json\nLoading: DASH_USDT-5m.json\nLoading: DCR_USDT-5m.json\nLoading: DOGE_USDT-5m.json\nLoading: DOT_USDT-5m.json\nLoading: EGLD_USDT-5m.json\nLoading: ENJ_USDT-5m.json\nLoading: EOS_USDT-5m.json\nLoading: ETC_USDT-5m.json\nLoading: ETH_USDT-5m.json\nLoading: FIL_USDT-5m.json\nLoading: FTM_USDT-5m.json\nLoading: FTT_USDT-5m.json\nLoading: HNT_USDT-5m.json\nLoading: HOT_USDT-5m.json\nLoading: ICX_USDT-5m.json\nLoading: KSM_USDT-5m.json\nLoading: LINK_USDT-5m.json\nLoading: LTC_USDT-5m.json\nLoading: LUNA_USDT-5m.json\nLoading: MANA_USDT-5m.json\nLoading: MATIC_USDT-5m.json\nLoading: MKR_USDT-5m.json\nLoading: NANO_USDT-5m.json\nLoading: NEAR_USDT-5m.json\nLoading: NEO_USDT-5m.json\nLoading: OMG_USDT-5m.json\nLoading: ONE_USDT-5m.json\nLoading: ONT_USDT-5m.json\nLoading: QTUM_USDT-5m.json\nLoading: RVN_USDT-5m.json\nLoading: SNX_USDT-5m.json\nLoading: SOL_USDT-5m.json\nLoading: SUSHI_USDT-5m.json\nLoading: TFUEL_USDT-5m.json\nLoading: THETA_USDT-5m.json\nLoading: TRX_USDT-5m.json\nLoading: UNI_USDT-5m.json\nLoading: VET_USDT-5m.json\nLoading: WAVES_USDT-5m.json\nLoading: XEM_USDT-5m.json\nLoading: XLM_USDT-5m.json\nLoading: XMR_USDT-5m.json\nLoading: XRP_USDT-5m.json\nLoading: YFI_USDT-5m.json\nLoading: ZEC_USDT-5m.json\nLoading: ZIL_USDT-5m.json\nLoading: ZRX_USDT-5m.json\nLOAD DATASET FINISHED.\n",
       "output_type": "stream"
      }
     ]
    }
   ]
  }
 ]
}